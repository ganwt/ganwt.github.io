<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IoTと無線ネットワーク(1)</title>
    <url>/2020/05/12/2020-05-12-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(1)/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>今日からIoTと無線ネットワークのコースを始め、毎週火曜日zoomより授業を受ける。演習課題を授業終わると書くつもりので、こちに記録してMarkdownの書く技も練習する。頑張れ！</p>
<h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><ul>
<li>IoTとは何か?<ol>
<li>IoT = Internet of Things = Internet + Things<pre><code>「モノのインターネット(Internet)」
インターネット(Internet)によって接続された「モノ」</code></pre></li>
<li>Thing:単なる「モノ」<pre><code>コンピュータ(computer)，タブレット(tablet)，携帯 電話などのガジェット(gadget)ではない</code></pre></li>
<li>インターネット(Internet)の役割<pre><code>情報を送受信
インターネット(Internet)に接続されたクラウド (cloud)上の計算サーバ(server)で稼働しているプロ グラムの助けを借りて，知的(smart)な処理が可能</code></pre></li>
</ol>
</li>
<li>なぜIoTが実現可能になったか?<ol>
<li>半導体技術の進歩<pre><code>集積度(チップあたりのトランジスタ数)の向上
機能と性能の向上
価格性能比の向上</code></pre></li>
<li>インターネットの普及<pre><code>端末(edge)側:無線化(WiFi，Bluetooth)
サーバ側:クラウド・サービスの提供</code></pre></li>
<li>ソフトウェア開発環境の進歩<pre><code>Python，Ruby
プロトタイピングが容易に⇒ビジネスの高速化</code></pre></li>
</ol>
</li>
</ul>
<h4 id="演習課題（１−１）"><a href="#演習課題（１−１）" class="headerlink" title="演習課題（１−１）"></a>演習課題（１−１）</h4><ul>
<li><p>半導体の集積度が18カ月ごとに2倍になるとすると， 9年後には集積度は何倍になるか?</p>
<ul>
<li><p>ヒント：$𝑝(𝑛) = 2^{𝑛/1.5}$</p>
<table>
<thead>
<tr>
<th>何年後</th>
<th>何倍</th>
</tr>
</thead>
<tbody><tr>
<td>9</td>
<td>64</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<h4 id="演習課題（１−２）"><a href="#演習課題（１−２）" class="headerlink" title="演習課題（１−２）"></a>演習課題（１−２）</h4><ol>
<li><p>演習課題 1-2-1</p>
<ul>
<li><p>次の計算を行って結果を確認しなさい。</p>
<pre><code>5 % 3 
5 % (-3) 
(-5) % 3 
(-5) % (-3)</code></pre>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> % <span class="number">3</span>       //<span class="number">2</span></span><br><span class="line"><span class="number">5</span> % (<span class="number">-3</span>)    //<span class="number">-1</span></span><br><span class="line">(<span class="number">-5</span>) % <span class="number">3</span>    //<span class="number">1</span></span><br><span class="line">(<span class="number">-5</span>) % (<span class="number">-3</span>) //<span class="number">-2</span></span><br></pre></td></tr></table></figure></li>
<li><p>どのような規則で計算されているかを考えなさい。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//A ％ B = C , 除算して、余数を表示します。</span><br><span class="line">//「-」はもしかし:</span><br><span class="line">//  ・+B ＝ C</span><br><span class="line">//  ・-B ＝ -C</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>演習課題 1-2-2</p>
<ul>
<li><p>次の計算を行って結果を確認しなさい。</p>
<pre><code>5 // 3 
5 // (-3) 
(-5) // 3 
(-5) // (-3) </code></pre>  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span> // <span class="number">3</span>       //<span class="number">1</span></span><br><span class="line"><span class="number">5</span> // (<span class="number">-3</span>)    //<span class="number">-2</span></span><br><span class="line">(<span class="number">-5</span>) // <span class="number">3</span>    //<span class="number">-2</span></span><br><span class="line">(<span class="number">-5</span>) // (<span class="number">-3</span>) //<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
<li><p>どのような規則で計算されているかを考えなさい。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//除算して、余数を抜き、整数だけ残っています。</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>演習課題 1-2-3</p>
<ul>
<li><p>2つの数値を変数xおよびyに入力し，xとyの加算， 減算，乗算，浮動小数点除算，整数除算，剰余を計 算して出力するプログラムを作成して，ソースリス トをPDFで提出せよ。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=int(input(<span class="string">"x="</span>))                         //x=<span class="number">5</span></span><br><span class="line">y=int(input(<span class="string">"y="</span>))                         //y=<span class="number">3</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n加算:"</span>)                            //加算:</span><br><span class="line">print(<span class="string">"x+y = "</span> ,x+y)                       //x+y =  <span class="number">8</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n減算:"</span>)                            //減算:</span><br><span class="line">print(<span class="string">"x-y = "</span> ,x-y)                       //x-y =  <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n乗算:"</span>)                            //乗算:</span><br><span class="line">print(<span class="string">"x*y = "</span> ,x*y)                       //x*y =  <span class="number">15</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n浮動小数点除算:"</span>)                   //浮動小数点除算:</span><br><span class="line">print(<span class="string">"x.0/y.0 = "</span> ,float(x)/float(y))     //x<span class="number">.0</span>/y<span class="number">.0</span> =  <span class="number">1.6666666666666667</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n整数除算:"</span>)                        //整数除算:</span><br><span class="line">print(<span class="string">"x//y = "</span> ,x//y)                     //x//y =  <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n剰余:"</span>)                           //剰余:</span><br><span class="line">print(<span class="string">"x%y = "</span> ,x%y)                       //x%y =  <span class="number">2</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<p>以上</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>日本語</tag>
        <tag>メモ</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>IoTと無線ネットワーク(2)</title>
    <url>/2020/05/20/2020-05-19-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(2)/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>IoTと無線ネットワークのコースの第二回目授業メモです。</p>
<h1 id="IoT"><a href="#IoT" class="headerlink" title="IoT"></a>IoT</h1><h2 id="インターネット通信の概要"><a href="#インターネット通信の概要" class="headerlink" title="インターネット通信の概要"></a>インターネット通信の概要</h2><h3 id="1-IP-インターネット・プロトコル"><a href="#1-IP-インターネット・プロトコル" class="headerlink" title="1.IP = インターネット・プロトコル"></a>1.IP = インターネット・プロトコル</h3><ul>
<li>IP(Internet Protocol)：<br>複数の通信ネットワークを相互に接続し，データを中継・伝送 して一つの大きなネットワークにすることができる通信規約 (プロトコル)の一つ</li>
<li>IPアドレス(IP Address)：<br>インターネット中のコンピュータの固有のアドレス</li>
<li>パケット(Packet)：<br>コンピュータ間でデータを送受信するための転送単位。<br>メッセージは複数のパケットに分割して転送される</li>
<li>パケットの内容：<br>ヘッダ<br>受信先アドレス(IPアドレス)<br>送信元アドレス(IPアドレス)<br>データ</li>
</ul>
<h3 id="2-TCP"><a href="#2-TCP" class="headerlink" title="2.TCP"></a>2.TCP</h3><ul>
<li>概要：<br>メッセージは多数のパケットに分割されて受信先に転送<br>転送経路はパケットによって異なる<br>パケットの到着順はパケットの送信順と異なるかも知れ ない<br>到着したパケットを送信順に並べ替える必要がある<br>Transmission Control Protocol(TCP)<br>・パケットを正しい順序に並べ替えてメッセージを再構成するためのプロトコル</li>
<li>信頼性：<br>メッセージを構成する全てのパケットが到着してい れば，パケットのロス(紛失)はない<br>データの品質に影響を及ぼすような通信の遅延はな い(VoIPでの会話，ストリーミング・オーディオ)<br>到着した全てのパケットは正しい順序(送信順)に 並べ替えられてメッセージが再構成される</li>
<li>接続の確立：<img src="https://blog-svend-ganwt.s3.amazonaws.com/ipic/2020-05-19-131433.png" alt="image-接続の確立" style="zoom:50%;" /></li>
<li>接続の確立(3-way handshake)：<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gey2k62195j31cn0u0q6r.jpg" alt="image-接続の確立(3-way handshake)" style="zoom:50%;" /></li>
<li>データの送信(成功)：<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gey2kiakywj316e0u0gu5.jpg" alt="image-データの送信(成功)" style="zoom:50%;" /></li>
<li>データの送信(失敗)：<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gey2ku2zt7j313f0u0n6a.jpg" alt="image-データの送信(失敗)" style="zoom:50%;" /></li>
<li>接続の終了<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gey2l2piqlj317u0u077u.jpg" alt="image-接続の終了" style="zoom:50%;" />

</li>
</ul>
<h3 id="3-UDP-User-Datagram-Protocol"><a href="#3-UDP-User-Datagram-Protocol" class="headerlink" title="3.UDP(User Datagram Protocol)"></a>3.UDP(User Datagram Protocol)</h3><ul>
<li><p>UDPの概要：<br>コネクションレス型のプロトコル<br>TCPに比べると信頼性がない<br>高速転送が可能<br>UDPヘッダサイズが少ない(8byte)ので，その分アプ リケーションのデータを多く送受信することが可能<br>ただし，パケットが到達する保証がないので，パケットロスなどの場合には，アプリケーション側で再送処理をして通信を成立させるかパケットロスが容認きるアプリで使用する必要がある。</p>
</li>
<li><p>UDPの用途：<br>音声や映像などのリアルタイム性のあるデータを転送する場合<br>複数の相手に同じデータを同時に転送する場合:<br>・マルチキャスト通信(1対N)<br>・ブロードキャスト通信<br>信頼性が重要でなく，少量のデータ転送をしたい場合:<br>・Domain Name System (DNS)<br>・Simple Network Management Protocol (SNMP)<br>・Routing Information Protocol (RIP)<br>・Dynamic Host Configuration Protocol (DHCP)<br>・Network Time Protocol (NTP)</p>
</li>
<li><p>UDPのデータフォーマット</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gey3tjil3hj31es0m610g.jpg" alt="image-UDPのデータフォーマット" style="zoom:50%;" />
</li>
<li><p>TCPとUDPの比較</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gey3uc4lmoj31g20oq44m.jpg" alt="image-TCPとUDPの比較" style="zoom:50%;" /> 

</li>
</ul>
<h3 id="4-TCP-IP"><a href="#4-TCP-IP" class="headerlink" title="4.TCP/IP"></a>4.TCP/IP</h3><ul>
<li><p>概要：<br>TCPとIPの組み合わせは 非常によく使われるので，単に「TCP / IP」と呼ぶ。<br>それぞれのレイヤーが下にあるレイヤーの構成要素を用いて一連のプロトコルまたはスタックを記述。<br>OSI=Open System Interconnection</p>
</li>
<li><p>OSI参照モデル：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>7</td>
<td>アプリケーション層</td>
<td>ソフトウェアがあつかう通信サービス層，ファイル，メールの転送などを提 供。HTTPやFTP等の通信サービスなどが含まれる。</td>
</tr>
<tr>
<td>6</td>
<td>プレゼンテーション層</td>
<td>データの表現方法，圧縮方式，文字コードなどの定義を管理する。</td>
</tr>
<tr>
<td>5</td>
<td>セッション層</td>
<td>通信プログラム間の通信の開始から終了までのセッションを管理する。</td>
</tr>
<tr>
<td>4</td>
<td>トランスポート層</td>
<td>エラー訂正，再送制御などTCPの機能などはここに位置する。</td>
</tr>
<tr>
<td>3</td>
<td>ネットワーク層</td>
<td>ネットワーク上の通信経路の選択，つまり一般的なルーティングはこの層 でおこなわれる，ルータなどはこの階層での仕事が主になる。</td>
</tr>
<tr>
<td>2</td>
<td>データリンク層</td>
<td>接続されている通信機器間の信号のやりとり，受け渡しなど，一般的なス イッチングハブなどはこの層を扱うことが可能となっている。</td>
</tr>
<tr>
<td>1</td>
<td>物理層</td>
<td>物理的な接続，電気的であったり，その形状など，基本的な通信機器の 物理的なものを内包する。</td>
</tr>
</tbody></table>
</li>
<li><p>ルータの動作：</p>
<img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gey496op8yj30u00y7tx5.jpg" alt="image-ルータの動作" style="zoom:50%;" />

</li>
</ul>
<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="Pythonプログラミング-2"><a href="#Pythonプログラミング-2" class="headerlink" title="Pythonプログラミング(2)"></a>Pythonプログラミング(2)</h2><h3 id="データ型"><a href="#データ型" class="headerlink" title="データ型"></a>データ型</h3><h4 id="文字列型"><a href="#文字列型" class="headerlink" title="文字列型"></a>文字列型</h4><h5 id="文字列型の記述方法-1"><a href="#文字列型の記述方法-1" class="headerlink" title="文字列型の記述方法(1)"></a>文字列型の記述方法(1)</h5><p>  ・文字の並びをダブルクォート(“)もしくはシングルクォー ト(‘)で囲んだオブジェクト</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"Hello, world!"</span></span><br><span class="line"><span class="comment">#'Hello, world!'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'Hello, world!'</span></span><br><span class="line"><span class="comment">#'Hello, world!'</span></span><br></pre></td></tr></table></figure>

<h5 id="文字列型の記述方法-2"><a href="#文字列型の記述方法-2" class="headerlink" title="文字列型の記述方法(2)"></a>文字列型の記述方法(2)</h5><p>  ・ダブルクォート(“)を含む文字列またはシングルクォート(‘) を含む文字列を作るには，文字列全体をそれぞれシングル クォート(‘)またはダブルクォート(“)で囲む</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'"Hello," he said.'</span></span><br><span class="line"><span class="comment">#'"Hello," he said.'</span></span><br><span class="line"></span><br><span class="line"><span class="string">"'Hello,' world!"</span></span><br><span class="line"><span class="comment">#"'Hello,' world!"</span></span><br></pre></td></tr></table></figure>

<h5 id="文字列型の記述方法-3"><a href="#文字列型の記述方法-3" class="headerlink" title="文字列型の記述方法(3)"></a>文字列型の記述方法(3)</h5><p>  ・長さ0の文字列も生成できる(“” または ‘’)</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span></span><br><span class="line"><span class="comment">#''</span></span><br><span class="line"></span><br><span class="line"><span class="string">''</span></span><br><span class="line"><span class="comment">#''</span></span><br></pre></td></tr></table></figure>

<h5 id="文字列型の記述方法-4"><a href="#文字列型の記述方法-4" class="headerlink" title="文字列型の記述方法(4)"></a>文字列型の記述方法(4)</h5><p>  ・複数の行にわたる文字列は，3つの連続したダブルクォー ト(“)またはシングルクォート(‘)で文字列を囲むことによっ て作成できる</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""The quick brown fox</span></span><br><span class="line"><span class="string">jumps over the lazy dog."""</span></span><br><span class="line"><span class="comment">#'The quick brown fox¥jumps over the lazy dog.'</span></span><br><span class="line"><span class="comment"># ¥n　は　改行コード</span></span><br></pre></td></tr></table></figure>
<p>  3重クォートで囲まれた文字列は，プログラムのコメント としても使用可能!</p>
<h5 id="エスケープシーケンス-1"><a href="#エスケープシーケンス-1" class="headerlink" title="エスケープシーケンス(1)"></a>エスケープシーケンス(1)</h5><p>  ・改行やタブなど，通常の記述方法では表せない文字 を2文字以上の文字を組み合わせて表現する方法<br>  ・Windows環境でのPythonの場合，エスケープ文字 として「¥」を用いる</p>
<h5 id="エスケープシーケンス-2"><a href="#エスケープシーケンス-2" class="headerlink" title="エスケープシーケンス(2)"></a>エスケープシーケンス(2)</h5><p>  ・正しい記述</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"It's me!"</span>)</span><br><span class="line"><span class="comment"># It's me!</span></span><br></pre></td></tr></table></figure>
<p>  ・誤った記述</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'It'</span>s me!<span class="string">')</span></span><br><span class="line"><span class="string"># SyntaxError: invalid syntax</span></span><br></pre></td></tr></table></figure>

<h5 id="エスケープシーケンス-3"><a href="#エスケープシーケンス-3" class="headerlink" title="エスケープシーケンス(3)"></a>エスケープシーケンス(3)</h5><p>  ・「’」で囲まれた文字列中の「’」</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'It¥'</span>s me!<span class="string">')</span></span><br><span class="line"><span class="string"># It'</span>s me!</span><br></pre></td></tr></table></figure>
<p>  ・改行</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"abc¥ndef"</span>)</span><br><span class="line"><span class="comment"># abc</span></span><br><span class="line"><span class="comment"># def</span></span><br></pre></td></tr></table></figure>

<p>  ・水平タブ</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"abc¥tdef"</span>)</span><br><span class="line"><span class="comment"># abc    def</span></span><br></pre></td></tr></table></figure>



<h3 id="変数と名前"><a href="#変数と名前" class="headerlink" title="変数と名前"></a>変数と名前</h3><p>(今日同僚と飲み会ので、２２時から宿題と文書を書くので、もう疲れた、あまりの内容はまたね。。。。。2020年5月20日 0:14)</p>
<h2 id="演習課題"><a href="#演習課題" class="headerlink" title="演習課題"></a>演習課題</h2><h3 id="演習課題（2−1）"><a href="#演習課題（2−1）" class="headerlink" title="演習課題（2−1）"></a>演習課題（2−1）</h3><p>  文字列 s を “ abcdefghijklmnopqrstuvwxyz” とする。 (文字列の先頭にスペースがあることに注意)</p>
<ol>
<li>文字列 s を用いて，文字列 “<strong>elephant</strong>“ を生成するプログラム。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">" abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">print(<span class="string">"演習課題 1"</span>)</span><br><span class="line">print(s[<span class="number">5</span>]+s[<span class="number">12</span>]+s[<span class="number">5</span>]+s[<span class="number">16</span>]+s[<span class="number">8</span>]+s[<span class="number">1</span>]+s[<span class="number">14</span>]+s[<span class="number">20</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">演習課題 1</span><br><span class="line">elephant</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h3 id="演習課題（2−2）"><a href="#演習課題（2−2）" class="headerlink" title="演習課題（2−2）"></a>演習課題（2−2）</h3><p>  文字列 s を “** abcdefghijklmnopqrstuvwxyz**” とする。 (文字列の先頭にスペースがあることに注意)</p>
<ol>
<li><p>文字列 s からスライス記法を用いて文字列 “<strong>ehknq</strong>“ を生成する プログラム。ただし，スライスの先頭 start および末尾 end の値 は正とする。</p>
</li>
<li><p>文字列 s からスライス記法を用いて文字列 “<strong>ehknq</strong>“ を生成する プログラム。ただし，スライスの先頭 start および末尾 end の値 は負とする。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">" abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">print(<span class="string">"演習課題 2"</span>)</span><br><span class="line">print(<span class="string">"正とする結果:"</span>,s[<span class="number">5</span>:<span class="number">18</span>:<span class="number">3</span>])</span><br><span class="line">print(<span class="string">"負とする結果:"</span>,s[<span class="number">-22</span>:<span class="number">-9</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">演習課題 2</span><br><span class="line">正とする結果: ehknq</span><br><span class="line">負とする結果: ehknq</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="演習課題（2−3）"><a href="#演習課題（2−3）" class="headerlink" title="演習課題（2−3）"></a>演習課題（2−3）</h3><p>  文字列 s を “ abcdefghijklmnopqrstuvwxyz” とする。 (文字列の先頭にスペースがあることに注意)</p>
<ol>
<li><p>文字列 s からスライス記法を用いて文字列 “<strong>qnkhe</strong>“ を生成する プログラム。ただし，スライスの先頭 start および末尾 end の値 は正とする。</p>
</li>
<li><p>文字列 s からスライス記法を用いて文字列 “<strong>qnkhe</strong>“ を生成する プログラム。ただし，スライスの先頭 start および末尾 end の値 は負とする。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">" abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">print(<span class="string">"演習課題 3"</span>)</span><br><span class="line">print(<span class="string">"正とする結果:"</span>,s[<span class="number">17</span>:<span class="number">4</span>:<span class="number">-3</span>])</span><br><span class="line">print(<span class="string">"負とする結果:"</span>,s[<span class="number">-10</span>:<span class="number">-23</span>:<span class="number">-3</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">演習課題 3</span><br><span class="line">正とする結果: qnkhe</span><br><span class="line">負とする結果: qnkhe</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="演習課題（2−4）"><a href="#演習課題（2−4）" class="headerlink" title="演習課題（2−4）"></a>演習課題（2−4）</h3><p>  文字列 “The quick brown fox jumps over the lazy dog.” に含まれる文字 “a”, “e”, “i”, “o”, “u” の個数をカウントして印字するプログラムを作成せよ。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">"The quick brown fox jumps over the lazy dog."</span></span><br><span class="line">print(<span class="string">"演習課題 4"</span>)</span><br><span class="line">a = s.count(<span class="string">"a"</span>)</span><br><span class="line">e = s.count(<span class="string">"e"</span>)</span><br><span class="line">i = s.count(<span class="string">"i"</span>)</span><br><span class="line">o = s.count(<span class="string">"o"</span>)</span><br><span class="line">u = s.count(<span class="string">"u"</span>)</span><br><span class="line">print(<span class="string">"a:"</span>,a,<span class="string">"\ne:"</span>,e,<span class="string">"\ni:"</span>,i,<span class="string">"\no:"</span>,o,<span class="string">"\nu:"</span>,u)</span><br><span class="line">print(<span class="string">"count:"</span>,a+e+i+o+u)</span><br></pre></td></tr></table></figure>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">演習課題 4</span><br><span class="line">a: 1 </span><br><span class="line">e: 3 </span><br><span class="line">i: 1 </span><br><span class="line">o: 4 </span><br><span class="line">u: 2</span><br><span class="line">count: 11</span><br></pre></td></tr></table></figure>


<p>以上</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>日本語</tag>
        <tag>メモ</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>ZCU106 MacBook UART VCP 终端调试 波特率</title>
    <url>/2020/05/18/2020-05-18-ZCU106%20MacBook%20UART%20VCP%20%E7%BB%88%E7%AB%AF%E8%B0%83%E8%AF%95%20%E6%B3%A2%E7%89%B9%E7%8E%87/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查询：</span><br><span class="line">ls -l &#x2F;dev&#x2F;tty.* </span><br><span class="line"></span><br><span class="line">设置：</span><br><span class="line">screen &#x2F;dev&#x2F;tty.SLAB_USBtoUART 115200</span><br></pre></td></tr></table></figure>



<p><a href="https://china.xilinx.com/content/xilinx/zh/products/boards-and-kits/zcu106.html.html#hardware" target="_blank" rel="noopener">Zynq UltraScale+ MPSoC ZCU106</a> 评估套件做开发的时候，会有需要用到终端来调试的时候。Windows和Linux的话，有Xilinx 软件开发套件 (XSDK)可用，安装以后只要直接插入USB连接就可以了。而macOS系统，接入USB却发现不了。</p>
<p>困恼了许久，网上相应的教程也甚少。线插上后毫无反应，怀疑过接口和线材有问题，各种测试后确认可能是没有相关驱动。最后チョウさん帮忙，在Google搜【macos cu baute rate】才解决。</p>
<h2 id="关于波特率的介绍"><a href="#关于波特率的介绍" class="headerlink" title="关于波特率的介绍"></a>关于波特率的介绍</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><table><tr><td bgcolor=orange>（チョウさん提醒，加上波特率的介绍）</td></tr></table>

<p>在电子通讯领域，<strong>波特(Baud)</strong>即调制速率，指的是有效数据讯号调制载波的速率，即单位时间内载波调制状态变化的次数。它是对符号传输速率的一种度量，1波特即指每秒传输1个符号，而透过不同的调制方式，可以在一个码元符号上负载多个bit位讯号。</p>
<p>注意以下两点<strong>常见</strong>错误：<br>1 “波特”（Baud）本身已是速率，所以不需要写成 Baud Rate（Rate 是赘字）。<br>2 单位“波特”本身就已经是代表每秒的调制数，以“波特每秒”（Baud per second）为单位是一种常见的错误，但是在一般中文口语化的沟通上还是常以“波特率”来描述“波特”（Baud）。</p>
<h3 id="波特率的计算"><a href="#波特率的计算" class="headerlink" title="波特率的计算"></a>波特率的计算</h3><p>波特率有时候会同比特率混淆，实际上后者是对信息传输速率（传信率）的度量。波特率可以被理解为单位时间内传输符号的个数（传符号率），通过不同的调制方法可以在一个符号上负载多个比特信息。因此信息传输速率即比特率在数值上和波特率有这样的关系：<br>$$I=S\cdot \log _2{N}$$<br>其中$I$ 为传信率，$S$ 为波特率，$N$ 为每个符号负载的信息量，而${\displaystyle \log _{2}{N}}\log _2{N}$以比特为单位。因此只有在每个符号只代表一个比特信息的情况、或一些简单的调制方式下，例如基带二进制信号、或Bell 103或CCITT V.21（左列两种均为FSK）调制方式等，波特率与比特率才在数值上相等，但是它们的意义并不相同。</p>
<p>ZCU106 板子</p>
<p><img src="https://blog-svend-ganwt.s3.amazonaws.com/ipic/2020-05-16-083451.jpg" alt="ZCU106"></p>
<h1 id="步骤1-查询"><a href="#步骤1-查询" class="headerlink" title="步骤1 查询"></a>步骤1 查询</h1><p>连接zcu106板子的 <strong>USB UART</strong> 接口（上图标示左下往上第五行），后输入以下代码，查询已连接USB的接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l &#x2F;dev&#x2F;tty.*</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-svend-ganwt.s3.ap-northeast-1.amazonaws.com/iPic/image-20200518143550130.png" alt="image-20200518143550130"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lhc:~ lhc$ ls -l &#x2F;dev&#x2F;tty.* </span><br><span class="line">crw-rw-rw-  1 root  wheel   18,   0  5  4 11:54 &#x2F;dev&#x2F;tty.Ama-WirelessiAP</span><br><span class="line">crw-rw-rw-  1 root  wheel   18,   4  5  4 11:54 &#x2F;dev&#x2F;tty.Bluetooth-Incoming-Port</span><br><span class="line">crw-rw-rw-  1 root  wheel   18,   6  5  4 11:54 &#x2F;dev&#x2F;tty.X9-SerialPort</span><br><span class="line">crw-rw-rw-  1 root  wheel   18,   2  5  4 11:54 &#x2F;dev&#x2F;tty.ganwangtao-WirelessiAPv2-1</span><br></pre></td></tr></table></figure>

<p>记住上面列出的数据。我电脑里总共发现了*<em>0 2 4 6 *</em>，4个已连接的口</p>
<h1 id="步骤2-安装"><a href="#步骤2-安装" class="headerlink" title="步骤2 安装"></a>步骤2 安装</h1><p>到<a href="https://cn.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="noopener">CP210x USB 至 UART 桥 VCP 驱动器</a>下载软件。</p>
<p><img src="https://blog-svend-ganwt.s3.amazonaws.com/ipic/2020-05-16-085201.png" alt="image-00020516175201357"></p>
<p>下载之后，打开【Mac_OSX_VCP_Driver】文件夹，进入【SiLabsUSBDriverDisk.dmg】，双击【 Install Disk/Install CP210x VCP Driver】安装。</p>
<p><img src="https://blog-svend-ganwt.s3.amazonaws.com/ipic/2020-05-16-090201.png" alt="image-00020516180200585"></p>
<p>点击【打开】。</p>
<p><img src="https://blog-svend-ganwt.s3.amazonaws.com/ipic/2020-05-16-090400.png" alt="image-00020516180359464"></p>
<p><img src="https://blog-svend-ganwt.s3.amazonaws.com/ipic/2020-05-16-090508.png" alt="image-00020516180507863"></p>
<p><img src="https://blog-svend-ganwt.s3.amazonaws.com/ipic/2020-05-16-090628.png" alt="image-00020516180628602"></p>
<p><img src="https://blog-svend-ganwt.s3.amazonaws.com/ipic/2020-05-16-090815.png" alt="image-00020516180814310"></p>
<p><img src="https://blog-svend-ganwt.s3.amazonaws.com/ipic/2020-05-16-091233.png" alt="image-00020516181233502"></p>
<p><img src="https://blog-svend-ganwt.s3.amazonaws.com/ipic/2020-05-16-091733.png" alt="image-00020516181733354"></p>
<p><img src="https://blog-svend-ganwt.s3.amazonaws.com/ipic/2020-05-16-091837.png" alt="image-00020516181837282"></p>
<p><img src="https://blog-svend-ganwt.s3.amazonaws.com/ipic/2020-05-16-091906.png" alt="image-00020516181905675"></p>
<p><img src="https://blog-svend-ganwt.s3.amazonaws.com/ipic/2020-05-16-092113.png" alt="image-00020516182113443"></p>
<h1 id="步骤3-连接并设置波特率"><a href="#步骤3-连接并设置波特率" class="headerlink" title="步骤3 连接并设置波特率"></a>步骤3 连接并设置波特率</h1><p>主要用到以下的代码，在终端命令行里输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l &#x2F;dev&#x2F;tty.*</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-svend-ganwt.s3.ap-northeast-1.amazonaws.com/iPic/image-20200518143451585.png" alt="image-20200518143451585"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">lhc:~ lhc$ ls -l &#x2F;dev&#x2F;tty.*</span><br><span class="line">crw-rw-rw-  1 root  wheel   18,   0  5  4 11:54 &#x2F;dev&#x2F;tty.Ama-WirelessiAP</span><br><span class="line">crw-rw-rw-  1 root  wheel   18,   4  5  4 11:54 &#x2F;dev&#x2F;tty.Bluetooth-Incoming-Port</span><br><span class="line">crw-rw-rw-  1 root  wheel   18,   8  5 18 14:25 &#x2F;dev&#x2F;tty.SLAB_USBtoUART</span><br><span class="line">crw-rw-rw-  1 root  wheel   18,  10  5 18 14:25 &#x2F;dev&#x2F;tty.SLAB_USBtoUART5</span><br><span class="line">crw-rw-rw-  1 root  wheel   18,  12  5 18 14:25 &#x2F;dev&#x2F;tty.SLAB_USBtoUART6</span><br><span class="line">crw-rw-rw-  1 root  wheel   18,  14  5 18 14:25 &#x2F;dev&#x2F;tty.SLAB_USBtoUART7</span><br><span class="line">crw-rw-rw-  1 root  wheel   18,   6  5  4 11:54 &#x2F;dev&#x2F;tty.X9-SerialPort</span><br><span class="line">crw-rw-rw-  1 root  wheel   18,   2  5  4 11:54 &#x2F;dev&#x2F;tty.ganwangtao-WirelessiAPv2-1</span><br></pre></td></tr></table></figure>

<p>安装了驱动之后，电脑里新发现了<strong>8 10 12 14</strong> 四个接口。</p>
<h2 id="连接到A-core-CPU到终端"><a href="#连接到A-core-CPU到终端" class="headerlink" title="连接到A-core CPU到终端"></a>连接到<strong><em>A-core</em></strong> CPU到终端</h2><p>复制第新发现的第一个接口，也就是（8）的这一行，<strong>/dev/tty.SLAB_USBtoUART</strong> 。然后在终端里输入以下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ screen &#x2F;dev&#x2F;tty.SLAB_USBtoUART 115200</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-svend-ganwt.s3.ap-northeast-1.amazonaws.com/iPic/image-20200518144154744.png" alt="image-20200518144154744"></p>
<p>这样就是连接上了，虽然看起来是空的，只要你在板子上操作CPU A-core 的话，相应的数据就会显示在你的终端页面上。</p>
<h2 id="连接到R-core-CPU到终端"><a href="#连接到R-core-CPU到终端" class="headerlink" title="连接到R-core CPU到终端"></a>连接到<strong><em>R-core</em></strong> CPU到终端</h2><p>新建一个终端窗口，</p>
<p><img src="https://blog-svend-ganwt.s3.ap-northeast-1.amazonaws.com/iPic/image-20200518144911584.png" alt="image-20200518144911584"></p>
<p>和之前的一样，先输入查看列表的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l &#x2F;dev&#x2F;tty.*</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-svend-ganwt.s3.ap-northeast-1.amazonaws.com/iPic/image-20200518145136039.png" alt="image-20200518145136039"></p>
<p>这次复制第（10）的这一行，<strong>/dev/tty.SLAB_USBtoUART5</strong> 。然后在终端里输入以下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ screen &#x2F;dev&#x2F;tty.SLAB_USBtoUART5 115200</span><br></pre></td></tr></table></figure>

<p><img src="https://blog-svend-ganwt.s3.ap-northeast-1.amazonaws.com/iPic/image-20200518145333225.png" alt="image-20200518145333225"></p>
<p>显示空列表，就是成功连接上R-core了。只要 R5 CPU 有任何动作，都可以在这个终端里查看调试。</p>
<p>以上。</p>
]]></content>
      <categories>
        <category>工作笔记</category>
      </categories>
      <tags>
        <tag>中文</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>IoTと無線ネットワーク(3)</title>
    <url>/2020/05/26/2020-05-26-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(3)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先生の無線マイクが信号混乱かも、今日はサイレント授業をやった。</p>
<h1 id="IoT知識"><a href="#IoT知識" class="headerlink" title="IoT知識"></a>IoT知識</h1><p>静音授業なので、魚を触っていた。すまない父親が払った学費/泣きかぶり</p>
<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="pythonプログラミング-3"><a href="#pythonプログラミング-3" class="headerlink" title="pythonプログラミング(3)"></a>pythonプログラミング(3)</h2><h3 id="コンテナの種類"><a href="#コンテナの種類" class="headerlink" title="コンテナの種類"></a>コンテナの種類</h3><p>Markdownは行列の合併ができない為、以下の表はHTMLより作成</p>
<table>
    <tr>
        <th>種類</th>
        <th>要素へのアクセス方法</th>
        <th>mutable/<br>imutable</th>
        <th>特徴</th>
   </tr>
   <tr>
        <td>リスト</td>
        <td rowspan="2">オフセットで位置を指定，値が含まれているかどうかも判定可能</td>
        <td>mutable</td>
        <td>スタック(FIFO)としても使用可</td>
   </tr>
   <tr>
        <td>タプル</td>
        <td>imutable</td>
        <td>要素の値の変更，要素の追加・削除は<b>不可</b></td>
   </tr>
   <tr>
        <td>辞書</td>
        <td>オフセットの代わりにキーを用いて指定</td>
        <td rowspan="2">mutable</td>
        <td>キーとバリューを関連付けて格納連想記憶，ハッシュと類似</td>
   </tr>
   <tr>
        <td>集合</td>
        <td>集合に含まれているかどうかを判定</td>
        <td>キーのみを持つ辞書のようなもの要素の重複がなく順番もない</td>
   </tr>
</table>


<h3 id="リスト"><a href="#リスト" class="headerlink" title="リスト"></a>リスト</h3><h4 id="一-リストの生成-リストへの変換"><a href="#一-リストの生成-リストへの変換" class="headerlink" title="一.リストの生成, リストへの変換"></a>一.リストの生成, リストへの変換</h4><ol>
<li><p>リストの生成</p>
<ul>
<li><p>空リストの生成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = list()</span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># []</span></span><br><span class="line"></span><br><span class="line">x = []</span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># []</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>空でないリストの生成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"apple"</span>,<span class="string">"orange"</span>,<span class="string">"pear"</span>]</span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># ['apple','orange','pear']</span></span><br><span class="line"></span><br><span class="line">x = [<span class="string">"2"</span>,<span class="string">"0"</span>,<span class="string">"1"</span>,<span class="string">"9"</span>]</span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># ['2','0','1','9']</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>リストへの変換</p>
<ul>
<li><p>文字列からリストへの変換</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = list(<span class="string">"cat"</span>)</span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># ['c','a','t']</span></span><br><span class="line"></span><br><span class="line">x = (<span class="string">"Apple"</span>,<span class="string">"Orange"</span>,<span class="string">"Pear"</span>) <span class="comment">#tuple</span></span><br><span class="line">y = list(x)</span><br><span class="line">print(y)</span><br><span class="line"><span class="comment"># ['Apple','Orange','Pear']</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="二-インデックスを用いた要素の参照と変更"><a href="#二-インデックスを用いた要素の参照と変更" class="headerlink" title="二.インデックスを用いた要素の参照と変更"></a>二.インデックスを用いた要素の参照と変更</h4><ol>
<li><p>要素の参照</p>
<ul>
<li><p>インデックスを用いた参照</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br><span class="line">print(x[<span class="number">0</span>])</span><br><span class="line">print(x[<span class="number">1</span>])</span><br><span class="line">print(x[<span class="number">2</span>])</span><br><span class="line">print(x[<span class="number">-1</span>])</span><br><span class="line">print(x[<span class="number">-2</span>])</span><br><span class="line">print(x[<span class="number">-3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#a</span></span><br><span class="line"><span class="comment">#b</span></span><br><span class="line"><span class="comment">#c</span></span><br><span class="line"><span class="comment">#f</span></span><br><span class="line"><span class="comment">#e</span></span><br><span class="line"><span class="comment">#d</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>リスト要素の値の変更</p>
<ul>
<li><p>インデックスを用いた値の変更</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"green"</span>,<span class="string">"yellow"</span>,<span class="string">"red"</span>]</span><br><span class="line">x[<span class="number">0</span>] = <span class="string">"oops"</span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ['oops', 'yellow', 'red']</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>サブシークエンスの参照</p>
<ul>
<li><p>スライス(インデックスを用いた範囲指定)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br><span class="line">print(x[:])</span><br><span class="line">print(x[<span class="number">0</span>:])</span><br><span class="line">print(x[<span class="number">1</span>:])</span><br><span class="line">print(x[<span class="number">2</span>:<span class="number">4</span>])</span><br><span class="line">print(x[<span class="number">-4</span>:<span class="number">-2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#['a', 'b', 'c', 'd', 'e', 'f']</span></span><br><span class="line"><span class="comment">#['a', 'c', 'e']</span></span><br><span class="line"><span class="comment">#['b', 'd', 'f']</span></span><br><span class="line"><span class="comment">#['b', 'e']</span></span><br><span class="line"><span class="comment">#['c', 'e']</span></span><br><span class="line"><span class="comment">#['c', 'f']</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>サブシークエンスの変更</p>
<ul>
<li><p>スライスを用いた値の変更</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br><span class="line">x[<span class="number">2</span>:<span class="number">4</span>] = [<span class="string">"x"</span>,<span class="string">"y"</span>]</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ['a', 'b', 'x', 'y', 'e', 'f']</span></span><br><span class="line"></span><br><span class="line">x = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br><span class="line">x[<span class="number">1</span>::<span class="number">2</span>] = [<span class="string">"x"</span>,<span class="string">"y"</span>,<span class="string">"z"</span>]</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ['a', 'x', 'c', 'y', 'e', 'z']</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>要素の有無の確認</p>
<ul>
<li><p>演算子 in を用いた要素の有無の確認</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"green"</span>,<span class="string">"yellow"</span>,<span class="string">"red"</span>]</span><br><span class="line">print(<span class="string">"green"</span> <span class="keyword">in</span> x)</span><br><span class="line">print(<span class="string">"black"</span> <span class="keyword">not</span> <span class="keyword">in</span> x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>要素のインデックスの検索</p>
<ul>
<li><p>関数 index() を用いた要素のインデックスの検索</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br><span class="line">print(x.index(<span class="string">"c"</span>))</span><br><span class="line">print(x.index(<span class="string">"f"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line">print(x.index(<span class="string">"z"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ValueError: 'z' is not in list</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="三-リストへの要素の追加と削除"><a href="#三-リストへの要素の追加と削除" class="headerlink" title="三.リストへの要素の追加と削除"></a>三.リストへの要素の追加と削除</h4><ol>
<li><p>末尾への要素の追加</p>
<ul>
<li><p>メソッドppend()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>]</span><br><span class="line">print(x)</span><br><span class="line">x.append(<span class="number">1</span>)</span><br><span class="line">print(x)</span><br><span class="line">x.append(<span class="number">5</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [3, 1, 4]</span></span><br><span class="line"><span class="comment"># [3, 1, 4, 1]</span></span><br><span class="line"><span class="comment"># [3, 1, 4, 1, 5]</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<p>2.要素の取り出し<br>    - メソッド pop()  末尾の要素の取り出し<br>    - メソッド pop(i) インデックスを用いた要素の取り出し</p>
<pre><code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">y = []</span><br><span class="line">print(<span class="string">"x = "</span>,x)</span><br><span class="line">print(<span class="string">"y = "</span>,y)</span><br><span class="line">y.append(x.pop())</span><br><span class="line">print(<span class="string">"x = "</span>,x)</span><br><span class="line">print(<span class="string">"y = "</span>,y)</span><br><span class="line">y.append(x.pop())</span><br><span class="line">print(<span class="string">"x = "</span>,x)</span><br><span class="line">print(<span class="string">"y = "</span>,y)</span><br><span class="line">y.append(x.pop())</span><br><span class="line">print(<span class="string">"x = "</span>,x)</span><br><span class="line">print(<span class="string">"y = "</span>,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x =  ['a', 'b', 'c']</span></span><br><span class="line"><span class="comment"># y =  []</span></span><br><span class="line"><span class="comment"># x =  ['a', 'b']</span></span><br><span class="line"><span class="comment"># y =  ['c']</span></span><br><span class="line"><span class="comment"># x =  ['a']</span></span><br><span class="line"><span class="comment"># y =  ['c', 'b']</span></span><br><span class="line"><span class="comment"># x =  []</span></span><br><span class="line"><span class="comment"># y =  ['c', 'b', 'a']</span></span><br></pre></td></tr></table></figure></code></pre><h4 id="四-リストに対する操作と関数"><a href="#四-リストに対する操作と関数" class="headerlink" title="四.リストに対する操作と関数"></a>四.リストに対する操作と関数</h4><ol>
<li><p>リストの連接</p>
<ul>
<li><p>+演算子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">y = [<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br><span class="line">z = x + y</span><br><span class="line">print(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ['a', 'b', 'c', 'd', 'e', 'f']</span></span><br><span class="line"></span><br><span class="line">x = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">y = [<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br><span class="line">x += y</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ['a', 'b', 'c', 'd', 'e', 'f']</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>メソッド append() の違い</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">y = [<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br><span class="line">x.append(y)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ['a', 'b', 'c', ['d', 'e', 'f']]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>メソッド extend()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">y = [<span class="string">"d"</span>,<span class="string">"e"</span>,<span class="string">"f"</span>]</span><br><span class="line">x.extend(y)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ['a', 'b', 'c', 'd', 'e', 'f']</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>要素の削除</p>
<ul>
<li><p>del 文を使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line"><span class="keyword">del</span> x[<span class="number">1</span>]</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ['a', 'c']</span></span><br><span class="line"></span><br><span class="line">x = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line"><span class="keyword">del</span> x[<span class="number">-1</span>]</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ['a','b']</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>メソッド remove()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">x.remove[<span class="string">"b"</span>]</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ['a', 'c']</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>リストの長さ(要素数)</p>
<ul>
<li><p>関数 len()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>]</span><br><span class="line">n = len(x)</span><br><span class="line">print(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>関数 count()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = list(<span class="string">"abc"</span>)</span><br><span class="line">print(x)</span><br><span class="line">n = x.count(<span class="string">"b"</span>)</span><br><span class="line">print(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ["a","b","c"]</span></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line">x = <span class="string">"abc"</span></span><br><span class="line">print(x)</span><br><span class="line">n = x.count(<span class="string">"b"</span>)</span><br><span class="line">print(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># abc</span></span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="五-リストの代入とコピー"><a href="#五-リストの代入とコピー" class="headerlink" title="五.リストの代入とコピー"></a>五.リストの代入とコピー</h4><ol>
<li><p>リストの代入</p>
<ul>
<li>= による変数への代入</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"green"</span>,<span class="string">"yellow"</span>,<span class="string">"red"</span>]</span><br><span class="line">y = x</span><br><span class="line">print(<span class="string">"x = "</span>,x)</span><br><span class="line">print(<span class="string">"y = "</span>,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x =  ['green', 'yellow', 'red']</span></span><br><span class="line"><span class="comment"># y =  ['green', 'yellow', 'red']</span></span><br></pre></td></tr></table></figure>

<ul>
<li>元のリストの要素の修 正結果が代入先にも反 映される</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"green"</span>,<span class="string">"yellow"</span>,<span class="string">"red"</span>]</span><br><span class="line">y = x</span><br><span class="line">print(<span class="string">"x = "</span>,x)</span><br><span class="line">print(<span class="string">"y = "</span>,y)</span><br><span class="line">x[<span class="number">0</span>] = <span class="string">"oops"</span></span><br><span class="line">print(<span class="string">"x = "</span>,x)</span><br><span class="line">print(<span class="string">"y = "</span>,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x =  ['green', 'yellow', 'red']</span></span><br><span class="line"><span class="comment"># y =  ['green', 'yellow', 'red']</span></span><br><span class="line"><span class="comment"># x =  ['oops', 'yellow', 'red']</span></span><br><span class="line"><span class="comment"># y =  ['oops', 'yellow', 'red']</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<ol start="2">
<li><p>関数 copy()</p>
<ul>
<li><p>copy()を用いると別のオブジェクトが生成される</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"green"</span>,<span class="string">"yellow"</span>,<span class="string">"red"</span>]</span><br><span class="line">y = x.copy()</span><br><span class="line">print(<span class="string">"x = "</span>,x)</span><br><span class="line">print(<span class="string">"y = "</span>,y)</span><br><span class="line">x[<span class="number">0</span>] = <span class="string">"oops"</span></span><br><span class="line">print(<span class="string">"x = "</span>,x)</span><br><span class="line">print(<span class="string">"y = "</span>,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x =  ['green', 'yellow', 'red']</span></span><br><span class="line"><span class="comment"># y =  ['green', 'yellow', 'red']</span></span><br><span class="line"><span class="comment"># x =  ['oops', 'yellow', 'red']</span></span><br><span class="line"><span class="comment"># y =  ['green', 'yellow', 'red']</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>list()変換関数</p>
<ul>
<li><p>リストのスライス [:]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="string">"green"</span>,<span class="string">"yellow"</span>,<span class="string">"red"</span>]</span><br><span class="line">y = x[:]</span><br><span class="line">print(<span class="string">"x = "</span>,x)</span><br><span class="line">print(<span class="string">"y = "</span>,y)</span><br><span class="line">x[<span class="number">0</span>] = <span class="string">"oops"</span></span><br><span class="line">print(<span class="string">"x = "</span>,x)</span><br><span class="line">print(<span class="string">"y = "</span>,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x =  ['green', 'yellow', 'red']</span></span><br><span class="line"><span class="comment"># y =  ['green', 'yellow', 'red']</span></span><br><span class="line"><span class="comment"># x =  ['oops', 'yellow', 'red']</span></span><br><span class="line"><span class="comment"># y =  ['green', 'yellow', 'red']</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h2 id="演習課題"><a href="#演習課題" class="headerlink" title="演習課題"></a>演習課題</h2><p>略</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 略</span></span><br></pre></td></tr></table></figure>

<h1 id="質問"><a href="#質問" class="headerlink" title="質問"></a>質問</h1><p>何か質問が有ったら、コメントしてください。<br>多分何も回答しない（笑）、</p>
<p>何故なら？この部落のURLは自分しか知ってる人間がいないので、<br>自分を自分に質問など、<br>面白いかな？</p>
<p>未来の私が今の私にコメントする事（笑い</p>
<p>以上</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>日本語</tag>
        <tag>メモ</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/10/2020-05-10-hello-world/</url>
    <content><![CDATA[<p>今日周末在家，想动手写个记录自己的网站。用<a href="https://mdbootstrap.com/" target="_blank" rel="noopener">mdbootstrap</a>写了一会儿静态页面之后，打算参考一下其他人的代码。搜了一下【搭建个人博客】关键词。然后，折腾了一天的<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>！第一次用Markdown，直接在Hello World文档基础上改，意外还挺好用的，比html好用多了，确实可以更少打扰的敲文字。</p>
<h2 id="Markdown的一些功能"><a href="#Markdown的一些功能" class="headerlink" title="Markdown的一些功能"></a>Markdown的一些功能</h2><h3 id="可以简单的加三个-“-”-号来添加代码。"><a href="#可以简单的加三个-“-”-号来添加代码。" class="headerlink" title="可以简单的加三个 “ ``` ” 号来添加代码。"></a>可以简单的加三个 “ ``` ” 号来添加代码。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>上面这段代码就是新建md文章的代码。</p>
<h3 id="Run-server-启动本地服务器预览网页"><a href="#Run-server-启动本地服务器预览网页" class="headerlink" title="Run server 启动本地服务器预览网页"></a>Run server 启动本地服务器预览网页</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>一般直接用 <code>$ hexo s</code> ,比较简短。URL：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></p>
<h3 id="Generate-static-files-生成静态页面"><a href="#Generate-static-files-生成静态页面" class="headerlink" title="Generate static files 生成静态页面"></a>Generate static files 生成静态页面</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>同上，可以直接用 <code>$ hexo g</code> ,比较简短。生成的文件会在 /public 文件夹下面。</p>
<h3 id="Deploy-to-remote-sites-可以部署到github等"><a href="#Deploy-to-remote-sites-可以部署到github等" class="headerlink" title="Deploy to remote sites 可以部署到github等"></a>Deploy to remote sites 可以部署到github等</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>同上，可以直接用 <code>$ hexo g</code> ,比较简短。一键部署。</p>
<h3 id="还有，挺开心的，想学习【ejs】了，希望自己可以坚持下去，把现有的html5-css3-JavaScript基础都过一遍。总之，越来越好的，只是时间问题，都能学会的。今天就到这里啦，等会儿链接到ganwt-com网址下就，晚安。"><a href="#还有，挺开心的，想学习【ejs】了，希望自己可以坚持下去，把现有的html5-css3-JavaScript基础都过一遍。总之，越来越好的，只是时间问题，都能学会的。今天就到这里啦，等会儿链接到ganwt-com网址下就，晚安。" class="headerlink" title="还有，挺开心的，想学习【ejs】了，希望自己可以坚持下去，把现有的html5+css3+JavaScript基础都过一遍。总之，越来越好的，只是时间问题，都能学会的。今天就到这里啦，等会儿链接到ganwt.com网址下就，晚安。"></a>还有，挺开心的，想学习【ejs】了，希望自己可以坚持下去，把现有的html5+css3+JavaScript基础都过一遍。总之，越来越好的，只是时间问题，都能学会的。今天就到这里啦，等会儿链接到ganwt.com网址下就，晚安。</h3>]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>中文</tag>
      </tags>
  </entry>
  <entry>
    <title>IoTと無線ネットワーク(4)</title>
    <url>/2020/06/02/2020-06-02-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(4)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今日の授業はプロトタイピングです。</p>
<h1 id="IoT知識"><a href="#IoT知識" class="headerlink" title="IoT知識"></a>IoT知識</h1><p>参考資料：<a href="https://ja.wikipedia.org/wiki/プロトタイピング" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/プロトタイピング</a></p>
<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="pythonプログラミング-４"><a href="#pythonプログラミング-４" class="headerlink" title="pythonプログラミング(４)"></a>pythonプログラミング(４)</h2><h3 id="一、タプル"><a href="#一、タプル" class="headerlink" title="一、タプル"></a>一、タプル</h3><h4 id="タプルの生成"><a href="#タプルの生成" class="headerlink" title="タプルの生成"></a>タプルの生成</h4><ol>
<li><p>空タプルの生成</p>
<ul>
<li><p>関数 tuple()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">empty = tuple()</span><br><span class="line">print(empty)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ()</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">empty = ()</span><br><span class="line">print(empty)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ()</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>空でないタプルの生成</p>
<ul>
<li>(【要素の並び】)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rndm = (<span class="string">"M. Jackson"</span>, <span class="number">1958</span>, <span class="literal">True</span>)</span><br><span class="line">print(rndm)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ('M. Jackson', 1958, True)</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>タプルへの変換</p>
<ul>
<li><p>リストからタプルへの変換</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = tuple([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">print(numbers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (1,2,3,4,5)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>文字列からタプルへの変換</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">abc = tuple(<span class="string">"abcde"</span>)</span><br><span class="line">print(abc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ('a','b','c','d','e')</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="要素の参照と検索"><a href="#要素の参照と検索" class="headerlink" title="要素の参照と検索"></a>要素の参照と検索</h4><ol>
<li><p>タプルの要素の参照</p>
<ul>
<li><p>先頭からのオフセットによる参照</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dys = (<span class="string">"1984"</span>,<span class="string">"Brave New World"</span>,<span class="string">"Faherenheit 451"</span>)</span><br><span class="line">print(dys[<span class="number">0</span>])</span><br><span class="line">print(dys[<span class="number">1</span>])</span><br><span class="line">print(dys[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1984</span></span><br><span class="line"><span class="comment"># Brave New World</span></span><br><span class="line"><span class="comment"># Faherenheit 451</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>末尾からのオフセットによる参照</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dys = (<span class="string">"1984"</span>,<span class="string">"Brave New World"</span>,<span class="string">"Faherenheit 451"</span>)</span><br><span class="line">print(dys[<span class="number">-1</span>])</span><br><span class="line">print(dys[<span class="number">-2</span>])</span><br><span class="line">print(dys[<span class="number">-2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Faherenheit 451</span></span><br><span class="line"><span class="comment"># Brave New World</span></span><br><span class="line"><span class="comment"># 1984</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>タプルの要素の検索</p>
<ul>
<li>演算子 in の使用<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dys = (<span class="string">"1984"</span>,<span class="string">"Brave New World"</span>,<span class="string">"Faherenheit 451"</span>)</span><br><span class="line">print(<span class="string">"1984"</span> <span class="keyword">in</span> dys)</span><br><span class="line">print(<span class="string">"Handmaid's"</span> <span class="keyword">not</span> <span class="keyword">in</span> dys)</span><br><span class="line"></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="二、辞書"><a href="#二、辞書" class="headerlink" title="二、辞書"></a>二、辞書</h3><h4 id="辞書の生成"><a href="#辞書の生成" class="headerlink" title="辞書の生成"></a>辞書の生成</h4><ol>
<li><p>空辞書の生成</p>
<ul>
<li><p>dict()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = dict()</span><br><span class="line">print(fruits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;&#125;</span><br><span class="line">print(fruits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>空でない辞書の生成</p>
<ul>
<li>{【キーとバリューのペアの並び】}<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">"Apple"</span>:<span class="string">"Red"</span>,</span><br><span class="line">        <span class="string">"Banana"</span>:<span class="string">"Yellow"</span>&#125;</span><br><span class="line">print(fruits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;'Apple':'Red','Banana':'Yellow'&#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="要素の追加，参照，値の変更"><a href="#要素の追加，参照，値の変更" class="headerlink" title="要素の追加，参照，値の変更"></a>要素の追加，参照，値の変更</h4><ol>
<li><p>要素の追加</p>
<ul>
<li>辞書名[キー]=バリュー<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = dict()</span><br><span class="line">fruits[<span class="string">"Apple"</span>] = <span class="string">"Red"</span></span><br><span class="line">fruits[<span class="string">"Banana"</span>] = <span class="string">"Yellow"</span></span><br><span class="line">print(fruits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;'Apple':'Red','Banana':'Yellow'&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>要素の参照</p>
<ul>
<li>辞書名[キー]<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = dict()</span><br><span class="line">fruits[<span class="string">"Apple"</span>] = <span class="string">"Red"</span></span><br><span class="line">fruits[<span class="string">"Banana"</span>] = <span class="string">"Yellow"</span></span><br><span class="line">print(<span class="string">"Apple is"</span>,fruits[<span class="string">"Apple"</span>])</span><br><span class="line">print(<span class="string">"Banana is"</span>,fruits[<span class="string">"Banana"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apple is Red</span></span><br><span class="line"><span class="comment"># Banana is Yellow</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>要素の値の変更</p>
<ul>
<li>辞書名[キー]=バリュー<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">"Apple"</span>:<span class="string">"Red"</span>,</span><br><span class="line">        <span class="string">"Banana"</span>:<span class="string">"Yellow"</span>&#125;</span><br><span class="line">fruits[<span class="string">"Lemon"</span>] = <span class="string">"Green"</span></span><br><span class="line">print(<span class="string">"Apple is"</span>,fruits[<span class="string">"Apple"</span>])</span><br><span class="line">print(<span class="string">"Banana is"</span>,fruits[<span class="string">"Banana"</span>])</span><br><span class="line">print(<span class="string">"Lemon is"</span>,fruits[<span class="string">"Green"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Apple is Red</span></span><br><span class="line"><span class="comment"># Banana is Yellow</span></span><br><span class="line"><span class="comment"># Lemon is Green</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="キーによる検索，キーと値の取得"><a href="#キーによる検索，キーと値の取得" class="headerlink" title="キーによる検索，キーと値の取得"></a>キーによる検索，キーと値の取得</h4><ol>
<li><p>キーの検索</p>
<ul>
<li>演算子 in<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">"Apple"</span>:<span class="string">"Red"</span>,</span><br><span class="line">        <span class="string">"Banana"</span>:<span class="string">"Yellow"</span>,</span><br><span class="line">        <span class="string">"Lemon"</span>:<span class="string">"Green"</span>&#125;</span><br><span class="line">print(<span class="string">"Apple"</span> <span class="keyword">in</span> fruits)</span><br><span class="line">print(<span class="string">"Melon"</span> <span class="keyword">in</span> fruits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># True</span></span><br><span class="line"><span class="comment"># False</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>全ての <strong>キー</strong> の取得</p>
<ul>
<li>関数 keys()<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">"Apple"</span>:<span class="string">"Red"</span>,</span><br><span class="line">        <span class="string">"Banana"</span>:<span class="string">"Yellow"</span>,</span><br><span class="line">        <span class="string">"Lemon"</span>:<span class="string">"Green"</span>&#125;</span><br><span class="line">print(fruits.keys())</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict_keys(['Apple','Banana','Meron'])</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>全ての <strong>値</strong> の取得</p>
<ul>
<li>関数 values()<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">"Apple"</span>:<span class="string">"Red"</span>,</span><br><span class="line">        <span class="string">"Banana"</span>:<span class="string">"Yellow"</span>,</span><br><span class="line">        <span class="string">"Lemon"</span>:<span class="string">"Green"</span>&#125;</span><br><span class="line">print(fruits.values())</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict_values(['Red','Yellow','Green'])</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>全ての <strong>キー/値ペア</strong> の取得</p>
<ul>
<li>関数 items()<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">"Apple"</span>:<span class="string">"Red"</span>,</span><br><span class="line">        <span class="string">"Banana"</span>:<span class="string">"Yellow"</span>,</span><br><span class="line">        <span class="string">"Lemon"</span>:<span class="string">"Green"</span>&#125;</span><br><span class="line">print(fruits.items())</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict_items((['Apple':'Red'),('Banana':'Yellow'),('Lemon':'Green')])</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="要素の削除，辞書の削除"><a href="#要素の削除，辞書の削除" class="headerlink" title="要素の削除，辞書の削除"></a>要素の削除，辞書の削除</h4><ol>
<li><p>辞書の要素の削除</p>
<ul>
<li>del文<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">"Apple"</span>:<span class="string">"Red"</span>,</span><br><span class="line">        <span class="string">"Banana"</span>:<span class="string">"Yellow"</span>,</span><br><span class="line">        <span class="string">"Lemon"</span>:<span class="string">"Green"</span>&#125;</span><br><span class="line">print(fruits)</span><br><span class="line"><span class="keyword">del</span> fruits[<span class="string">"Banana"</span>]</span><br><span class="line">print(fruits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;'Apple':'Red','Banana':'Yellow','Lemon':'Green'&#125;</span></span><br><span class="line"><span class="comment"># &#123;'Apple':'Red','Lemon':'Green'&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>辞書の全要素の削除</p>
<ul>
<li>メソッド clear()<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">"Apple"</span>:<span class="string">"Red"</span>,</span><br><span class="line">        <span class="string">"Banana"</span>:<span class="string">"Yellow"</span>,</span><br><span class="line">        <span class="string">"Lemon"</span>:<span class="string">"Green"</span>&#125;</span><br><span class="line">print(fruits)</span><br><span class="line">fruits.clear()</span><br><span class="line">print(fruits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;'Apple':'Red','Banana':'Yellow','Lemon':'Green'&#125;</span></span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>辞書の削除</p>
<ul>
<li>del文<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">"Apple"</span>:<span class="string">"Red"</span>,</span><br><span class="line">        <span class="string">"Banana"</span>:<span class="string">"Yellow"</span>,</span><br><span class="line">        <span class="string">"Lemon"</span>:<span class="string">"Green"</span>&#125;</span><br><span class="line">print(fruits)</span><br><span class="line"><span class="keyword">del</span> fruits</span><br><span class="line">print(fruits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;'Apple':'Red','Banana':'Yellow','Lemon':'Green'&#125;</span></span><br><span class="line"><span class="comment"># Error</span></span><br></pre></td></tr></table></figure>
<h4 id="便利な関数"><a href="#便利な関数" class="headerlink" title="便利な関数"></a>便利な関数</h4></li>
</ul>
</li>
</ol>
<ul>
<li>pprint(): pretty print  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = dict()</span><br><span class="line">fruits[<span class="string">"Apple"</span>] = <span class="string">"Red"</span></span><br><span class="line">fruits[<span class="string">"Banana"</span>] = <span class="string">"Yellow"</span></span><br><span class="line">pp.pprint(fruits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;'Apple':'Red','Banana':'Yellow'&#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="三、集合"><a href="#三、集合" class="headerlink" title="三、集合"></a>三、集合</h3><h4 id="集合の生成"><a href="#集合の生成" class="headerlink" title="集合の生成"></a>集合の生成</h4><ol>
<li><p>空集合の生成</p>
<ul>
<li><p>関数 set()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = set()</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>{}</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = &#123;&#125;</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>空でない集合の生成</p>
<ul>
<li>{【要素の並び】}<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">even = &#123;<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>&#125;</span><br><span class="line">print(even)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;0,2,4,6,8,10&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>リストや文字列からの生成</p>
<ul>
<li><p>リストからの生成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = [<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>]</span><br><span class="line">even = set(num)</span><br><span class="line">print(even)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;0,2,4,6,8,10&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>文字列からの生成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">letters = set(<span class="string">"good people"</span>)</span><br><span class="line">print(letters)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;'e','d','l',' ','g','o','p'&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>タプルや辞書からの生成</p>
<ul>
<li><p>タプルからの生成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = (<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>)</span><br><span class="line">even = set(num)</span><br><span class="line">print(even)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;0,2,4,6,8,10&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>辞書からの生成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fruits = &#123;<span class="string">"Apple"</span>:<span class="string">"Red"</span>,</span><br><span class="line">        <span class="string">"Banana"</span>:<span class="string">"Yellow"</span>,</span><br><span class="line">        <span class="string">"Meron"</span>:<span class="string">"Green"</span>&#125;</span><br><span class="line">plant = set(fruits)</span><br><span class="line">print(plant)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;'Apple','Meron','Banana'&#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="要素の追加と削除"><a href="#要素の追加と削除" class="headerlink" title="要素の追加と削除"></a>要素の追加と削除</h4><ol>
<li><p>集合への要素の追加</p>
<ul>
<li><p>メソッド add()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">s.add(<span class="number">3</span>)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;0,1,2,3,4&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">s.add(<span class="number">5</span>)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;0,1,2,3,4,5&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>集合からの要素の削除</p>
<ul>
<li><p>メソッド discard()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">s.discard(<span class="number">1</span>)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;0,2,3,4&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">s.discard(<span class="number">5</span>)</span><br><span class="line">print(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;0,1,2,3,4&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>関数 pop()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">print(s.pop())</span><br><span class="line">print(s.pop())</span><br><span class="line">print(s.pop())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">print(s.pop())</span><br><span class="line">print(s.pop())</span><br><span class="line">print(s.pop())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0</span></span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment"># 2</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h4 id="集合に対する演算と関数"><a href="#集合に対する演算と関数" class="headerlink" title="集合に対する演算と関数"></a>集合に対する演算と関数</h4><ol>
<li><p>集合の要素数の計算</p>
<ul>
<li>関数 len()<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">n = len(s)</span><br><span class="line">print(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>和集合</p>
<ul>
<li><p>演算子 | </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">s_union = s1 | s2</span><br><span class="line">print(s_union)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;0,1,2,3&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>関数 union()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">s_union = s1.union(s2)</span><br><span class="line">print(s_union)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;0,1,2,3&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>積集合</p>
<ul>
<li><p>演算子 &amp;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">s_intsec = s1 &amp; s2</span><br><span class="line">print(s_intsec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;1,2&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>関数 intersection()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">s_intsec = s1.intersection(s2)</span><br><span class="line">print(s_intsec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;1,2&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>差集合</p>
<ul>
<li><p>演算子 - </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">s_diff = s1 - s2</span><br><span class="line">print(s_diff)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;0&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">s_diff = s1 - s2</span><br><span class="line">print(s_diff)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;0&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>関数 difference</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">s_diff = s1.difference(s2)</span><br><span class="line">print(s_diff)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;3&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">s_diff = s1.difference(s2)</span><br><span class="line">print(s_diff)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;3&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>対象差集合(排他的論理和に相当)</p>
<ul>
<li><p>演算子 ^ 演算子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">s_sd = s1 ^ s2</span><br><span class="line">print(s_sd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;0,3&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>関数 symmetric_difference()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">s_sd = s1.symmetric_difference(s2)</span><br><span class="line">print(s_sd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;0,3&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>部分集合かどうかの判定</p>
<ul>
<li><p>演算子  &lt;=</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">s_s = s1 &lt;= s2</span><br><span class="line">print(s_s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>関数 issubset()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">s_s = s1.issubset(s2)</span><br><span class="line">print(s_s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>上位集合かどうかの判定</p>
<ul>
<li><p>演算子  &gt;=</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">s_s = s2 &gt;= s1</span><br><span class="line">print(s_s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>関数 issuperset()</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">s_s = s2.issuperset(s1)</span><br><span class="line">print(s_s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>互いに素かどうかを判定</p>
<ul>
<li>関数 isdisjoint()<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = &#123;<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">s2 = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line">s3 = &#123;<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">print(s1.isdisjoint(s2))</span><br><span class="line">print(s1.isdisjoint(s3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># False</span></span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h2 id="演習課題"><a href="#演習課題" class="headerlink" title="演習課題"></a>演習課題</h2><ol>
<li>num = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25] とする。</li>
<li>num を集合に変換し，n に代入する。</li>
<li>num からスライスを用いて，4以上の2の倍数を取り出し，集合に変換してn2に代入する。</li>
<li>num からスライスを用いて，6以上の3の倍数を取り出し，集合に変換してn3に代入する。</li>
<li>num からスライスを用いて，10以上の5の倍数を取り出し，集合に変換してn5に代入する。</li>
<li>nからn2, n3, n5の要素を取り除く。</li>
<li>n の要素を印刷する。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>]</span><br><span class="line">print(<span class="string">"num: "</span>,num)</span><br><span class="line"></span><br><span class="line">n = set(num)</span><br><span class="line">print(<span class="string">"n  : "</span>,n)</span><br><span class="line"></span><br><span class="line">n2 = set(num[<span class="number">2</span>::<span class="number">2</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"n2 : "</span>,n2)</span><br><span class="line"></span><br><span class="line">n3 = set(num[<span class="number">4</span>::<span class="number">3</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"n3 : "</span>,n3)</span><br><span class="line"></span><br><span class="line">n5 = set(num[<span class="number">8</span>::<span class="number">5</span>])</span><br><span class="line"><span class="keyword">print</span> (<span class="string">"n5 : "</span>,n5)</span><br><span class="line"></span><br><span class="line">n = n-n2</span><br><span class="line">n = n-n3</span><br><span class="line">n = n-n5</span><br><span class="line">print(<span class="string">"n  : "</span>,n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># num:  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]</span></span><br><span class="line"><span class="comment"># n  :  &#123;2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25&#125;</span></span><br><span class="line"><span class="comment"># n2 :  &#123;4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24&#125;</span></span><br><span class="line"><span class="comment"># n3 :  &#123;6, 9, 12, 15, 18, 21, 24&#125;</span></span><br><span class="line"><span class="comment"># n5 :  &#123;25, 10, 20, 15&#125;</span></span><br><span class="line"><span class="comment"># n  :  &#123;2, 3, 5, 7, 11, 13, 17, 19, 23&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>日本語</tag>
        <tag>メモ</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>IoTと無線ネットワーク(5)</title>
    <url>/2020/06/09/2020-06-09-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(5)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天老师讲了各种开源协议，开源代码。</p>
<h1 id="IoT知識"><a href="#IoT知識" class="headerlink" title="IoT知識"></a>IoT知識</h1><p>略</p>
<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="pythonプログラミング-5"><a href="#pythonプログラミング-5" class="headerlink" title="pythonプログラミング(5)"></a>pythonプログラミング(5)</h2><h3 id="一、単純文と複合文"><a href="#一、単純文と複合文" class="headerlink" title="一、単純文と複合文"></a>一、単純文と複合文</h3><h4 id="1-単純文と複合文簡単紹介"><a href="#1-単純文と複合文簡単紹介" class="headerlink" title="1.単純文と複合文簡単紹介"></a>1.単純文と複合文簡単紹介</h4><ul>
<li><p>単純文: 1行のコードで記述</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/1.png" alt="image-00020625122823055" style="zoom:50%;" />
</li>
<li><p>複合文:1つ以上の節で構成</p>
<p>1つの節は2行以上のコードで 記述</p>
<p>1行目:ヘッダ(header)部，行末に “:”</p>
<p>2行目とそれ以降: スイート(suite)部</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/2.png" alt="image-00020625123004555" style="zoom:50%;" />

</li>
</ul>
<h4 id="2-複合文の例"><a href="#2-複合文の例" class="headerlink" title="2.複合文の例"></a>2.複合文の例</h4><ul>
<li><p>例1: if文</p>
</li>
<li><img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/3.png" alt="image-00020625123204190" style="zoom:50%;" />
</li>
<li><p>例2: for文</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/4.png" alt="image-00020625123219377" style="zoom:50%;" />
</li>
<li><p>例3: while文</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/5.png" alt="image-00020625123233510" style="zoom:50%;" />

</li>
</ul>
<h3 id="二、条件文"><a href="#二、条件文" class="headerlink" title="二、条件文"></a>二、条件文</h3><p>if, elif, elseを用いて 構成</p>
<ul>
<li><p>例1(if)</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/6.png" alt="image-00020625123440749" style="zoom:50%;" />
</li>
<li><p>例2(if-else)</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/7.png" alt="image-00020625123455795" style="zoom:50%;" />
</li>
<li><p>例3(if-elif-else)</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/8.png" alt="image-00020625123512037" style="zoom:50%;" />
</li>
<li><p>例4 (if-elif-…- else)</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/9.png" alt="image-00020625123526013" style="zoom:50%;" />



</li>
</ul>
<h3 id="三、for文"><a href="#三、for文" class="headerlink" title="三、for文"></a>三、for文</h3><p>for-in-range</p>
<ul>
<li><p>例: 0, 1, 2, … , 9に ついて繰り返す</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/10.png" alt="image-00020625123646957" style="zoom:50%;" />
</li>
<li><p>例: リストの要素について繰り返す</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/11.png" alt="image-00020625123708075" style="zoom:50%;" />
</li>
<li><p>例: 文字列内の文字について繰り返す</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/12.png" alt="image-00020625123722807" style="zoom:50%;" />

</li>
</ul>
<h3 id="四、while文"><a href="#四、while文" class="headerlink" title="四、while文"></a>四、while文</h3><ul>
<li><p>条件が真(True)であるあいだ繰り返す</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/13.png" alt="image-00020625123846007" style="zoom:50%;" />



</li>
</ul>
<h4 id="breakによる繰り返しの中止"><a href="#breakによる繰り返しの中止" class="headerlink" title="breakによる繰り返しの中止"></a>breakによる繰り返しの中止</h4><ul>
<li><p>何かが起きるまで繰り返したい場合には，無限ループ を使用する</p>
</li>
<li><p>ループによる繰り返しを中断するためにbreak文を用 いる</p>
</li>
<li><p>for文の中でもbreak文が使える</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/14.png" alt="image-00020625124000491" style="zoom:50%;" />

</li>
</ul>
<h3 id="五、関数-range"><a href="#五、関数-range" class="headerlink" title="五、関数 range()"></a>五、関数 range()</h3><h4 id="1-range"><a href="#1-range" class="headerlink" title="1.range()"></a>1.range()</h4><ul>
<li><p>指定された範囲の整数を順に生成</p>
</li>
<li><p>rangeのバリエーション</p>
<ul>
<li>range( end )</li>
<li>range( start，end )</li>
<li>range( start，end, step )</li>
</ul>
</li>
<li><p>end は省略できない</p>
</li>
<li><p>start が省略された場合，start = 0</p>
</li>
<li><p>step が省略された場合， step = 1</p>
</li>
<li><p>生成される値には end は含まれない</p>
</li>
<li><p>step の値が負の場合には，値を減少させる</p>
</li>
</ul>
<h4 id="2-関数-rangeの使用例"><a href="#2-関数-rangeの使用例" class="headerlink" title="2.関数 rangeの使用例"></a>2.関数 rangeの使用例</h4><ol>
<li><p>range( end )</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/15.png" alt="image-00020625124539944" style="zoom:50%;" />
</li>
<li><p>range( start，end )</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/16.png" alt="image-00020625124556813" style="zoom:50%;" />
</li>
<li><p>range( start，end, step )</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/17.png" alt="image-00020625124609840" style="zoom:50%;" />
</li>
<li><p>range( start，end, step )</p>
<ul>
<li>step の値が負の場合には，値を減少させる</li>
</ul>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/18.png" alt="image-00020625124634074" style="zoom:50%;" />
</li>
<li><p>rangeそのものは関数であって値を持たない</p>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/19.png" alt="image-00020625124654152" style="zoom:50%;" />
</li>
<li><p>listの生成</p>
<ul>
<li>関数 rangeを使ったリストの生成</li>
</ul>
<p><img src="2020-06-09-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(5)/20.png" alt="image-00020625124712524"></p>
</li>
<li><p>breakとcontinue</p>
<ul>
<li>break<ul>
<li>ループを終了</li>
</ul>
</li>
<li>continue<ul>
<li>繰返しを スキップ</li>
</ul>
</li>
</ul>
<img src="https://ganwt.com/image/2020-06-09-IoTと無線ネットワーク(5)/21.png" alt="image-00020625124836576" style="zoom:50%;" />

</li>
</ol>
<h2 id="演習課題"><a href="#演習課題" class="headerlink" title="演習課題"></a>演習課題</h2><ul>
<li>エラトステネスの篩(ふるい)は，指定された整数以下の全ての素数を発見する ための単純なアルゴリズムである。古代ギリシアの科学者、エラトステネスが考 案したとされるため、この名がある。 <a href="https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82</a> %B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9)</li>
<li>このアルゴリズムを用いて，標準入力から入力された整数以下の素数をすべて標 準出力に出力するPythonのプログラムを作成しなさい。</li>
<li>このプログラムを用いて，1000以下の素数を全て出力せよ。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 今天可能状态也不行吧，总之这题目不是我自己解的。参照了网上的方案，有两种解法。</span></span><br><span class="line"><span class="comment"># 解法一</span></span><br><span class="line">num=[]</span><br><span class="line">i=<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">100</span>):</span><br><span class="line">   j=<span class="number">2</span></span><br><span class="line">   <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>,i):</span><br><span class="line">      <span class="keyword">if</span>(i%j==<span class="number">0</span>):</span><br><span class="line">         <span class="keyword">break</span></span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      num.append(i)</span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解法二</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_get_prime</span><span class="params">(n)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> filter(<span class="keyword">lambda</span> x: <span class="keyword">not</span> [x%i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(math.sqrt(x))+<span class="number">1</span>) <span class="keyword">if</span> x%i ==<span class="number">0</span>], range(<span class="number">2</span>,n+<span class="number">1</span>))</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> func_get_prime(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我的解法</span></span><br><span class="line">p = []</span><br><span class="line">n = <span class="number">1000</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,num):</span><br><span class="line">        <span class="keyword">if</span>(num%i)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        p.append(num)</span><br><span class="line">print(p)</span><br></pre></td></tr></table></figure>

<pre><code>我可能有烦心事了，说是放弃就会快乐，并非如是。之前的烦恼是时间不够用，学校要写论文，公司要写代码，吉他得练，健身，登山，合气道，聚会。因为疫情的缘故，各种活动都停了，短暂的轻松，可是论文，研发，吉他。三件事就够我忙碌的了。

上周五晚买了人生第一条领带，周六一早正装危坐的做着论文答辩的初审。校长说这样的论文，完成度只有三分之一，要到学会，杂志发表的程度，还有三分之二要走。写了邮件给老师，说要努力，写出满意的论文之后，和jt去大阪。

一个星期的时间，终于，今天写邮件和教授商量着，论文要放弃了，不想写了。研究太累，还是敲敲代码毕业轻松吧。公司研发这边，把设定的部分交给了其他人去做，我只做运行的部分。放弃了，这周不再有梦中研究，却也空空的。

制定了一个粗略的目标，一年时间准备，存钱。搬家，换装，换状态。

看中了一块手表，想买，信用卡花太多了，剩下的额度不够，申请了提额被拒了。</code></pre><p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gfmci29kmuj30nr0rs42t.jpg" alt="238091591703316_.pic_hd"></p>
<p><img src="https://tva1.sinaimg.cn/large/007S8ZIlgy1gfmcigpc0uj30rs0kutcr.jpg" alt="238091591703316_.pic_hd"></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>日本語</tag>
        <tag>メモ</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>IoTと無線ネットワーク(6)</title>
    <url>/2020/06/16/2020-06-16-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(6)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>授業中で寝ちゃった</p>
<h1 id="IoT知識"><a href="#IoT知識" class="headerlink" title="IoT知識"></a>IoT知識</h1><p>略</p>
<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="pythonプログラミング-5"><a href="#pythonプログラミング-5" class="headerlink" title="pythonプログラミング(5)"></a>pythonプログラミング(5)</h2><h3 id="一、内包表記"><a href="#一、内包表記" class="headerlink" title="一、内包表記"></a>一、内包表記</h3><h4 id="1-リスト内包表記"><a href="#1-リスト内包表記" class="headerlink" title="1.リスト内包表記"></a>1.リスト内包表記</h4><ul>
<li><p>基本形 [expression for item in iterable]</p>
</li>
<li><p>例: for文を用いた記述</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/1.png" alt="25509830" style="zoom:50%;" />
</li>
<li><p>等価な内包表記</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/2.png" alt="25525271" style="zoom:50%;" />
</li>
<li><p>条件付き内包表記</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/3.png" alt="25543631" style="zoom:50%;" />
</li>
<li><p>等価なfor文での記述</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/4.png" alt="25556942" style="zoom:50%;" />



</li>
</ul>
<ul>
<li><p>ネストした内包表現</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/5.png" alt="25612437" style="zoom:50%;" />



</li>
</ul>
<h4 id="2-辞書内包表記"><a href="#2-辞書内包表記" class="headerlink" title="2.辞書内包表記"></a>2.辞書内包表記</h4><ul>
<li><p>辞書の生成</p>
</li>
<li><p>{key_item: value_item for item in iterable}</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/6.png" alt="25701954" style="zoom:50%;" />



</li>
</ul>
<h4 id="3-集合内包表記"><a href="#3-集合内包表記" class="headerlink" title="3.集合内包表記"></a>3.集合内包表記</h4><ul>
<li><p>集合の生成</p>
</li>
<li><p>{item for item in iterable}</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/7.png" alt="25740915" style="zoom:50%;" />

</li>
</ul>
<h4 id="4-ジェネレータ内包表記"><a href="#4-ジェネレータ内包表記" class="headerlink" title="4.ジェネレータ内包表記"></a>4.ジェネレータ内包表記</h4><ul>
<li><p>形式: (expression for item in iterable)</p>
</li>
<li><p>系列(シーケンス)を順次生成するオブジェクト</p>
</li>
<li><p>利用方法: 巨大なシーケンスを一度に生成すると巨大 なメモリ空間を消費するが，順次生成すれば，巨大な メモリ空間は必要ない</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/8.png" alt="25842544" style="zoom:50%;" />



</li>
</ul>
<ul>
<li><p>次の値を生成する関数 next</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/9.png" alt="25930434" style="zoom:50%;" />

</li>
</ul>
<h3 id="二、関数"><a href="#二、関数" class="headerlink" title="二、関数"></a>二、関数</h3><h4 id="1-関数"><a href="#1-関数" class="headerlink" title="1.関数"></a>1.関数</h4><ul>
<li><p>関数</p>
<ul>
<li>入力値を受取り、計算を行い、結果を出力する複合文</li>
<li>再利用が可能</li>
</ul>
</li>
<li><p>関数の呼び出し</p>
<ul>
<li><p>書式</p>
</li>
<li><p>関数名(引数の並び)</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/10.png" alt="30416884" style="zoom:50%;" />

</li>
</ul>
</li>
</ul>
<h4 id="2-関数の定義"><a href="#2-関数の定義" class="headerlink" title="2.関数の定義"></a>2.関数の定義</h4><ul>
<li><p>書式</p>
<p>def 【関数名】(【引数の並び】):</p>
<p>【関数の定義】</p>
<ul>
<li>def 関数定義の開始</li>
<li>return 出力(戻り値)の記述</li>
</ul>
</li>
<li><p>呼び出し方法</p>
<ul>
<li><p>関数名(引数の並び)</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/11.png" alt="30601418" style="zoom:50%;" />

</li>
</ul>
</li>
</ul>
<h4 id="3-関数についての補足"><a href="#3-関数についての補足" class="headerlink" title="3.関数についての補足"></a>3.関数についての補足</h4><ul>
<li>引数の個数<ul>
<li>0個でも良い           例: foo()</li>
<li>2個以上でもよい    例: foo(x, y)</li>
</ul>
</li>
<li>戻り値<ul>
<li>return で指定</li>
<li>戻り値を記述しないと None が返される</li>
</ul>
</li>
</ul>
<h4 id="4-組込み関数"><a href="#4-組込み関数" class="headerlink" title="4.組込み関数"></a>4.組込み関数</h4><ul>
<li>システムがあらかじめ提供している関数<ul>
<li>print        文字列をコンソール画面に出力</li>
<li>len         文字列などのオブジェクトの長さ</li>
<li>str         オブジェクトをstrデータ型の文字列に変換</li>
<li>int         整数の文字列もしくは浮動小数点数のオブジェクトを 整数に変換</li>
<li>float      数字の文字列もしくは整数のオブジェクトを浮動小数点数に変換</li>
<li>input     標準入力から情報(文字列)を入力する関数</li>
</ul>
</li>
</ul>
<h4 id="5-階乗関数"><a href="#5-階乗関数" class="headerlink" title="5.階乗関数"></a>5.階乗関数</h4><ul>
<li><p>関数の定義の中で自分 自身を呼び出す関数</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/12.png" alt="31016624" style="zoom:50%;" />
</li>
<li><p>階乗関数の定義</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/13.png" alt="31036947" style="zoom:50%;" />



</li>
</ul>
<ul>
<li><p>ループ版の階乗関数</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/14.png" alt="31112511" style="zoom:50%;" />

</li>
</ul>
<h4 id="6-フィボナッチ数"><a href="#6-フィボナッチ数" class="headerlink" title="6.フィボナッチ数"></a>6.フィボナッチ数</h4><ul>
<li><p>フィボナッチ数列: 0,1,1,2,3,5,8,13,21,34, ⋯</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/15.png" alt="31228324" style="zoom:50%;" />
</li>
<li><p>定義</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/16.png" alt="31242754" style="zoom:50%;" />



</li>
</ul>
<h4 id="7-ハノイの塔"><a href="#7-ハノイの塔" class="headerlink" title="7.ハノイの塔"></a>7.ハノイの塔</h4><p>問題：</p>
<ul>
<li><p>大きさの異なる𝑛枚のドーナツ状の円盤が杭Aに置いてある</p>
</li>
<li><p>これらの円盤を杭Aから杭Bに最小の手数で移動せよ</p>
</li>
<li><p>移動するときには，杭Cを用いても良い</p>
</li>
<li><p>ただし，小さい円盤の上に大きい円盤を乗せてはいけない</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/17.png" alt="31339829" style="zoom:50%;" />



</li>
</ul>
<p>回答：</p>
<ol>
<li><p>杭Aに置かれた𝑛 − 1枚の 円盤を杭Cに移動する</p>
</li>
<li><p>杭Aに置かれた円盤を杭B に移動する</p>
</li>
<li><p>杭Cに置かれた𝑛 − 1枚の 円盤を杭Bに移動する</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/18.png" alt="31531935" style="zoom:50%;" />
</li>
</ol>
<ul>
<li><p>ハノイの塔問題を解くプログラム</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/19.png" alt="31619969" style="zoom:50%;" />



</li>
</ul>
<h3 id="三、組込み関数"><a href="#三、組込み関数" class="headerlink" title="三、組込み関数"></a>三、組込み関数</h3><img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/20.png" alt="31710644" style="zoom:50%;" />

<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/21.png" alt="31730667" style="zoom:50%;" />



<h3 id="四、グローバル変数とローカル変数"><a href="#四、グローバル変数とローカル変数" class="headerlink" title="四、グローバル変数とローカル変数"></a>四、グローバル変数とローカル変数</h3><h4 id="1-変数のスコープ"><a href="#1-変数のスコープ" class="headerlink" title="1.変数のスコープ"></a>1.変数のスコープ</h4><ul>
<li>グローバル変数<ul>
<li>関数やクラスの外で定義された変数</li>
<li>プログラムのどこでも読み書き可能</li>
</ul>
</li>
<li>ローカル変数<ul>
<li>関数やクラスの中で定義された変数</li>
<li>定義された関数やクラスの中でのみ有効</li>
</ul>
</li>
</ul>
<h4 id="2-グローバル変数の例"><a href="#2-グローバル変数の例" class="headerlink" title="2.グローバル変数の例"></a>2.グローバル変数の例</h4><ul>
<li><p>グローバル変数へのアクセス</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/22.png" alt="32349299" style="zoom:50%;" />
</li>
<li><p>関数の中でグローバル変数に書き込む場合には global宣言が必要</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/23.png" alt="32405363" style="zoom:50%;" />
</li>
<li><p>global宣言がないと、xはローカル変数と見なされ、 値が代入される前に参照されるのでエラーになる</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/24.png" alt="32418660" style="zoom:50%;" />
</li>
<li><p>UnboundLocalError</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/25.png" alt="32438211" style="zoom:50%;" />

</li>
</ul>
<h4 id="3-ローカル変数の例"><a href="#3-ローカル変数の例" class="headerlink" title="3.ローカル変数の例"></a>3.ローカル変数の例</h4><img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/26.png" alt="32507816" style="zoom:50%;" />

<ul>
<li><p>ローカル変数は関数の外からアクセスできない</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/27.png" alt="32558362" style="zoom:50%;" />
</li>
<li><p>ローカル変数は関数の外からアクセスできない</p>
</li>
<li><img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/28.png" alt="32615460" style="zoom:50%;" />



</li>
</ul>
<h3 id="五、例外処理"><a href="#五、例外処理" class="headerlink" title="五、例外処理"></a>五、例外処理</h3><ul>
<li><p>b=0の場合にはどうなるか?</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/29.png" alt="32747195" style="zoom:50%;" />
</li>
<li><p>注:0割り算エラーは，整数割り算 //，剰余%の演算でも発生する</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/30.png" alt="32807249" style="zoom:50%;" />
</li>
<li><p>0割り算例外を検出して対応する記述</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/31.png" alt="32821984" style="zoom:50%;" />
</li>
<li><p>0割り算と不正入力例外を検出して対応する記述</p>
<img src="https://ganwt.com/image/2020-06-16-IoTと無線ネットワーク(6)/32.png" alt="32840252" style="zoom:50%;" />
</li>
<li><p><a href="https://docs.python.org/ja/3/tutorial/errors.html" target="_blank" rel="noopener">https://docs.python.org/ja/3/tutorial/errors.html</a></p>
</li>
</ul>
<h2 id="演習課題"><a href="#演習課題" class="headerlink" title="演習課題"></a>演習課題</h2><h4 id="演習課題１"><a href="#演習課題１" class="headerlink" title="演習課題１"></a>演習課題１</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 次の内包表現と等価なプログラムをPythonで作成しなさい。</span></span><br><span class="line">rows = range(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">cols = range(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">cells = [(row,col) <span class="keyword">for</span> row <span class="keyword">in</span> rows <span class="keyword">for</span> col <span class="keyword">in</span> cols]</span><br><span class="line">print(cells)</span><br><span class="line"><span class="comment"># [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 答</span></span><br><span class="line">cells2 = []</span><br><span class="line"><span class="keyword">for</span> row2 <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="keyword">for</span> col2 <span class="keyword">in</span> cols:</span><br><span class="line">        cells2.append((row2,col2))</span><br><span class="line">print(cells2)</span><br><span class="line"><span class="comment"># [(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3)]</span></span><br></pre></td></tr></table></figure>



<h4 id="演習課題２"><a href="#演習課題２" class="headerlink" title="演習課題２"></a>演習課題２</h4><p>フィボナッチ関数を再帰を用いないで，ループを使っ て記述しなさい。</p>
<p>$$ 𝐹(0)=1 $$<br>$$ 𝐹(1)=1 $$<br>$$ 𝐹(𝑛)=𝐹(𝑛−1)+𝐹(𝑛−2), 𝑛&gt;1 $$</p>
<p><strong>ヒント</strong>  : フィボナッチ関数の定義式を用いて， $ 𝐹 (𝑛) $ の値を， $ 𝑛 = 2, 3, 4, … $ の順に計算すればよい。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>)</span><br><span class="line"></span><br><span class="line">n = fib(<span class="number">2</span>)</span><br><span class="line">print(n)</span><br><span class="line"></span><br><span class="line">n = fib(<span class="number">3</span>)</span><br><span class="line">print(n)</span><br><span class="line"></span><br><span class="line">n = fib(<span class="number">4</span>)</span><br><span class="line">print(n)</span><br><span class="line"></span><br><span class="line">n = fib(<span class="number">5</span>)</span><br><span class="line">print(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 3</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># 8</span></span><br></pre></td></tr></table></figure>



<p>LJT约出门逛逛，昨天因为公司学习会没得去。现在约了出门去逛逛，走了 。20200616 19:36</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>日本語</tag>
        <tag>メモ</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>赛灵思xilinx(ZCU106) 连接PC文件I/O和局域网Apache2</title>
    <url>/2020/06/17/2020-06-17-ZCU106%20%E8%BF%9E%E6%8E%A5PC%E6%96%87%E4%BB%B6I:O%E5%92%8C%E5%B1%80%E5%9F%9F%E7%BD%91Apache2/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们在用 <a href="https://china.xilinx.com/content/xilinx/zh/products/boards-and-kits/zcu106.html.html#hardware" target="_blank" rel="noopener">Zynq UltraScale+ MPSoC ZCU106</a> 评估套件做开发的时候，前端页面依靠在 Goole Chrome 上面运行HTML + CSS + Javascript 来实现。利用 PHP 连接CPU-Acore ，再通过共用内存的方式与 CPU-Rcore交互。</p>
<p><img src="https://blog-svend-ganwt.s3.ap-northeast-1.amazonaws.com/iPic/image-20200617102447402.png" alt="image-20200617102447402"></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>大致思路如图所示。做页面的开发与调试的过程中，需要后端的数据，才不至于整个页面到处是error的提示和无法运行。刚开始是做了个虚拟的数据程序.exe在pc上做页面的开发与调试。随着开发节奏的紧凑，时间不够用，每版特地做个虚拟程序的方案实在进行不下去了，就想要做个PC直连板子传输文件，且顺带通过Apache2让项目组的其他人也可以操控板子。大致思路如下：</p>
<p><img src="https://blog-svend-ganwt.s3.ap-northeast-1.amazonaws.com/iPic/image-20200617103533901.png" alt="image-20200617103533901"></p>
<h3 id="网页访问实现方案："><a href="#网页访问实现方案：" class="headerlink" title="网页访问实现方案："></a>网页访问实现方案：</h3><p>先给板子设定一个ip，再给电脑设一个ip，再设个转发端口。</p>
<p>给板子设ip：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 192.168.100.2 netmask 255.255.255.0 up</span><br></pre></td></tr></table></figure>

<p>这样就完成了，当然，每次重启之后就必须重新输入一下。可以在启动程序里面写入永久命令，这样就不用每次输入了。相关教程网上搜一下吧。</p>
<p>接下来给电脑设置一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两种方式:</span><br><span class="line">1. 不开apache2, 用80端口</span><br><span class="line">只需要一步:</span><br><span class="line">1) 防火墙里添加入站规则， 允许tcp80端口入站</span><br><span class="line"></span><br><span class="line">2.使用9090端口</span><br><span class="line">管理员权限打开cmd窗口：</span><br><span class="line">1） netsh interface portproxy delete v4tov4 listenport&#x3D;80</span><br><span class="line">2） netsh interface portproxy add v4tov4 listenport&#x3D;9090 connectaddress&#x3D;192.168.100.2 connectport&#x3D;80</span><br><span class="line">防火墙：</span><br><span class="line">3) 防火墙里添加入站规则， 允许tcp9090端口入站</span><br></pre></td></tr></table></figure>

<h3 id="控制台访问实现方案："><a href="#控制台访问实现方案：" class="headerlink" title="控制台访问实现方案："></a>控制台访问实现方案：</h3><p>如果是与板子直连的PC，直接ssh就可以访问了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.100.2</span><br></pre></td></tr></table></figure>

<p>而，非直连PC的话，还需要再做个22端口的代理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">管理员权限打开cmd窗口：</span><br><span class="line">1） netsh interface portproxy add v4tov4 listenport&#x3D;2222 connectaddress&#x3D;192.168.100.2 connectport&#x3D;22</span><br><span class="line">防火墙：</span><br><span class="line">2) 防火墙里添加入站规则， 允许tcp2222端口入站</span><br><span class="line"></span><br><span class="line">就可以通过2222端口访问板子的控制台了</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>工作笔记</category>
      </categories>
      <tags>
        <tag>中文</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>IoTと無線ネットワーク(7)</title>
    <url>/2020/06/25/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>授業中で寝ちゃった</p>
<p>やる気なくなちゃった</p>
<h1 id="IoT知識"><a href="#IoT知識" class="headerlink" title="IoT知識"></a>IoT知識</h1><p>SOAとAPI指向アーキテクチャとは何か?</p>
<p>略</p>
<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="pythonプログラミング-5"><a href="#pythonプログラミング-5" class="headerlink" title="pythonプログラミング(5)"></a>pythonプログラミング(5)</h2><h3 id="一、モジュール"><a href="#一、モジュール" class="headerlink" title="一、モジュール"></a>一、モジュール</h3><h4 id="1-組み込みモジュールのインポート"><a href="#1-組み込みモジュールのインポート" class="headerlink" title="1.組み込みモジュールのインポート"></a>1.組み込みモジュールのインポート</h4><ul>
<li>mathモジュールをイン ポート</li>
<li><a href="https://docs.python.org/ja/3/library/math.html" target="_blank" rel="noopener">https://docs.python.org/ja/3/library/math.html</a></li>
</ul>
<h4 id="2-mathモジュールのインポートと実行例"><a href="#2-mathモジュールのインポートと実行例" class="headerlink" title="2.mathモジュールのインポートと実行例"></a>2.mathモジュールのインポートと実行例</h4><ul>
<li><p>定数</p>
<p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/1.png" alt="iot5"></p>
</li>
</ul>
<ul>
<li><p>sqrt</p>
<p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/2.png" alt="iot5"></p>
</li>
</ul>
<ul>
<li><p>三角関数</p>
<p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/3.png" alt="iot5"></p>
</li>
</ul>
<h4 id="3-組み込みモジュールの使用例"><a href="#3-組み込みモジュールの使用例" class="headerlink" title="3.組み込みモジュールの使用例"></a>3.組み込みモジュールの使用例</h4><ul>
<li><p>random</p>
<p>rondom.randint (n, m)    n から m の間の整数 型乱数を返す関数</p>
<p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/4.png" alt="iot5"></p>
</li>
</ul>
<ul>
<li><p>statistics</p>
<p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/5.png" alt="iot5"></p>
</li>
</ul>
<ul>
<li><p>keyword</p>
<p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/6.png" alt="iot5"></p>
</li>
</ul>
<h3 id="二、ファイル入出力"><a href="#二、ファイル入出力" class="headerlink" title="二、ファイル入出力"></a>二、ファイル入出力</h3><h4 id="1-ファイルパス"><a href="#1-ファイルパス" class="headerlink" title="1.ファイルパス"></a>1.ファイルパス</h4><ul>
<li><p>os.path.join( path, *path ) 1つまたはそれ以上のファイルパスの構成要素を結合 する関数</p>
</li>
<li><p>様々なOSに対応</p>
<p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/7.png" alt="iot5"></p>
</li>
</ul>
<h4 id="2-open関数とcloseメソッド"><a href="#2-open関数とcloseメソッド" class="headerlink" title="2.open関数とcloseメソッド"></a>2.open関数とcloseメソッド</h4><ul>
<li><p>アクセスモード指定</p>
<ul>
<li><p>r       読み込み専用</p>
</li>
<li><p>w     書き込み専用</p>
</li>
<li><p>w+   読み書き可</p>
<p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/8.png" alt="iot5"></p>
</li>
</ul>
</li>
</ul>
<h4 id="3-日本語文字列を書き込む場合"><a href="#3-日本語文字列を書き込む場合" class="headerlink" title="3.日本語文字列を書き込む場合"></a>3.日本語文字列を書き込む場合</h4><ul>
<li><p>encoding: 変換方式を指定</p>
<p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/9.png" alt="iot5"></p>
</li>
</ul>
<h4 id="4-ファイルを自動的に閉じる"><a href="#4-ファイルを自動的に閉じる" class="headerlink" title="4.ファイルを自動的に閉じる"></a>4.ファイルを自動的に閉じる</h4><ul>
<li><p>プログラムのコードが全て実行された後でファイルが 自動的に閉じられる</p>
<p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/10.png" alt="iot5"></p>
</li>
</ul>
<ul>
<li><p>実行後の読み込み実行例</p>
<p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/11.png" alt="iot5"></p>
</li>
</ul>
<h4 id="5-ファイルのコンテンツをlistに格納"><a href="#5-ファイルのコンテンツをlistに格納" class="headerlink" title="5.ファイルのコンテンツをlistに格納"></a>5.ファイルのコンテンツをlistに格納</h4><p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/12.png" alt="iot5"></p>
<h4 id="6-csvファイルへの書き込み"><a href="#6-csvファイルへの書き込み" class="headerlink" title="6.csvファイルへの書き込み"></a>6.csvファイルへの書き込み</h4><p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/13.png" alt="iot5"></p>
<h4 id="7-csvファイルからの読み込み"><a href="#7-csvファイルからの読み込み" class="headerlink" title="7.csvファイルからの読み込み"></a>7.csvファイルからの読み込み</h4><p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/14.png" alt="iot5"></p>
<h2 id="演習課題"><a href="#演習課題" class="headerlink" title="演習課題"></a>演習課題</h2><h4 id="演習課題１"><a href="#演習課題１" class="headerlink" title="演習課題１"></a>演習課題１</h4><p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/15.png" alt="iot5"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"st.csv"</span>,<span class="string">"w"</span>,newline=<span class="string">""</span>) <span class="keyword">as</span> f:</span><br><span class="line">    write=csv.writer(f,delimiter=<span class="string">","</span>)</span><br><span class="line">    write.writerow([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line">    write.writerow([<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line">    write.writerow([<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>])</span><br><span class="line">    write.writerow([<span class="number">3</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">18</span>,<span class="number">21</span>,<span class="number">24</span>,<span class="number">27</span>])</span><br><span class="line">    write.writerow([<span class="number">4</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">12</span>,<span class="number">16</span>,<span class="number">20</span>,<span class="number">24</span>,<span class="number">28</span>,<span class="number">32</span>,<span class="number">36</span>])</span><br><span class="line">    write.writerow([<span class="number">5</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">30</span>,<span class="number">35</span>,<span class="number">40</span>,<span class="number">45</span>])</span><br><span class="line">    write.writerow([<span class="number">6</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">18</span>,<span class="number">24</span>,<span class="number">30</span>,<span class="number">36</span>,<span class="number">42</span>,<span class="number">48</span>,<span class="number">54</span>])</span><br><span class="line">    write.writerow([<span class="number">7</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">21</span>,<span class="number">28</span>,<span class="number">35</span>,<span class="number">42</span>,<span class="number">49</span>,<span class="number">56</span>,<span class="number">63</span>])</span><br><span class="line">    write.writerow([<span class="number">8</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">24</span>,<span class="number">32</span>,<span class="number">40</span>,<span class="number">48</span>,<span class="number">56</span>,<span class="number">64</span>,<span class="number">72</span>])</span><br><span class="line">    write.writerow([<span class="number">9</span>,<span class="number">9</span>,<span class="number">18</span>,<span class="number">27</span>,<span class="number">36</span>,<span class="number">45</span>,<span class="number">54</span>,<span class="number">63</span>,<span class="number">72</span>,<span class="number">81</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"st.csv"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    r=csv.reader(f,delimiter=<span class="string">","</span>)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> r:</span><br><span class="line">        print(<span class="string">","</span>.join(row))</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 0,1,2,3,4,5,6,7,8,9</span></span><br><span class="line"><span class="comment"># 1,1,2,3,4,5,6,7,8,9</span></span><br><span class="line"><span class="comment"># 2,2,4,6,8,10,12,14,16,18</span></span><br><span class="line"><span class="comment"># 3,3,6,9,12,15,18,21,24,27</span></span><br><span class="line"><span class="comment"># 4,4,8,12,16,20,24,28,32,36</span></span><br><span class="line"><span class="comment"># 5,5,10,15,20,25,30,35,40,45</span></span><br><span class="line"><span class="comment"># 6,6,12,18,24,30,36,42,48,54</span></span><br><span class="line"><span class="comment"># 7,7,14,21,28,35,42,49,56,63</span></span><br><span class="line"><span class="comment"># 8,8,16,24,32,40,48,56,64,72</span></span><br><span class="line"><span class="comment"># 9,9,18,27,36,45,54,63,72,81</span></span><br></pre></td></tr></table></figure>



<h4 id="演習課題２"><a href="#演習課題２" class="headerlink" title="演習課題２"></a>演習課題２</h4><p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/16.png" alt="iot5"></p>
<p><img src="https://ganwt.com/image/2020-06-25-IoT%E3%81%A8%E7%84%A1%E7%B7%9A%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF(7)/17.png" alt="iot5"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"st2.csv"</span>,<span class="string">"r"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    r=csv.reader(f,delimiter=<span class="string">","</span>)</span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> r:</span><br><span class="line">        line = [int(c) <span class="keyword">if</span> c != <span class="string">""</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> c <span class="keyword">in</span> line ]</span><br><span class="line">        data.append(line)</span><br><span class="line">        </span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[0, 6, 0, 0, 0, 1, 0, 0, 2], </span></span><br><span class="line"><span class="comment">#  [0, 9, 0, 0, 0, 0, 0, 5, 0], </span></span><br><span class="line"><span class="comment">#  [0, 0, 0, 4, 7, 0, 9, 0, 0],</span></span><br><span class="line"><span class="comment">#  [8, 0, 0, 0, 1, 4, 5, 0, 0],</span></span><br><span class="line"><span class="comment">#  [0, 0, 2, 0, 0, 0, 0, 0, 0], </span></span><br><span class="line"><span class="comment">#  [0, 0, 0, 9, 0, 0, 8, 0, 7], </span></span><br><span class="line"><span class="comment">#  [0, 0, 8, 0, 0, 6, 3, 1, 0],</span></span><br><span class="line"><span class="comment">#  [4, 0, 6, 0, 2, 0, 0, 0, 0],</span></span><br><span class="line"><span class="comment">#  [0, 0, 0, 0, 0, 0, 2, 0, 0]]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>日本語</tag>
        <tag>メモ</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
